generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("MYSQL_URL")
}

model actionLog {
  id           Int       @default(autoincrement())
  user_id      Int?
  description  String?   @db.VarChar(255)
  type         Int
  created_time DateTime? @default(now()) @db.DateTime(0)
  is_deleted   Boolean?  @default(false)
  user         user?     @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_act_user_id_use_id_4lmm")

  @@id([id, type])
  @@index([user_id], map: "fk_act_user_id_use_id_4lmm_idx")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model actionProcessStep {
  process_step_id                                                     Int
  next_process_step_id                                                Int
  country_id                                                          Int?
  bank_id                                                             Int?
  priority                                                            Int?           @default(1) @db.TinyInt
  service_type_id                                                     Int?
  action_step_type_id                                                 Int
  created_time                                                        DateTime?      @default(now()) @db.DateTime(0)
  updated_time                                                        DateTime?      @default(now()) @db.DateTime(0)
  is_deleted                                                          Int?           @default(0) @db.TinyInt
  id                                                                  Int            @id @default(autoincrement())
  country                                                             country?       @relation(fields: [country_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "action_process_step_ibfk_1")
  action_step_type                                                    actionStepType @relation(fields: [action_step_type_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_act_action_step_type_id_act_id_cogw")
  bank                                                                bank?          @relation(fields: [bank_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_act_bank_id_ban_id_1ne")
  process_step_action_process_step_next_process_step_idToprocess_step process_step   @relation("action_process_step_next_process_step_idToprocess_step", fields: [next_process_step_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_act_next_process_step_id_pro_id_3b6i")
  process_step_action_process_step_process_step_idToprocess_step      process_step   @relation("action_process_step_process_step_idToprocess_step", fields: [process_step_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_act_process_step_id_pro_id_nxu")
  service_type                                                        service_type?  @relation(fields: [service_type_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_next_step_service_type_idx")

  @@index([action_step_type_id], map: "fk_action_step_type_idx")
  @@index([next_process_step_id], map: "fk_child_process_step_id")
  @@index([bank_id], map: "fk_next_step_bank_idx")
  @@index([country_id], map: "fk_next_step_country_idx")
  @@index([service_type_id], map: "fk_next_step_service_type_idx_idx")
  @@index([process_step_id], map: "fk_parent_process_step_id")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model actionStepType {
  id                    Int                     @id @default(autoincrement())
  name                  String                  @db.VarChar(45)
  created_time          DateTime?               @default(now()) @db.DateTime(0)
  updated_time          DateTime?               @default(now()) @db.DateTime(0)
  is_deleted            Int                     @default(0) @db.TinyInt
  action_process_step   actionProcessStep[]
  history_log_cdc       history_log_cdc[]
  notification_template notification_template[]
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model additionProcess {
  id               Int              @id @default(autoincrement())
  task_id          Int
  tracking_link    String?          @db.VarChar(200)
  tracking_code    String?          @db.VarChar(100)
  // created_time     DateTime?        @default(now()) @db.DateTime(0)
  // updated_time     DateTime?        @default(now()) @db.DateTime(0)
  // is_deleted       Boolean?         @default(false)
  service_type_ids Json?
  task             task             @relation(fields: [task_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_add_task_id_tas_id_ayud")
  billing          billing[]
  process          process[]
  task_has_agent   task_has_agent[]

  @@index([task_id], map: "fk_task_addition_process")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model agency {
  id           Int       @id @default(autoincrement())
  name         String?   @db.VarChar(100)
  is_deleted   Boolean?  @default(false)
  created_time DateTime? @default(now()) @db.DateTime(0)
  updated_time DateTime? @default(now()) @db.DateTime(0)
  agent        agent[]
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model agent {
  id             Int              @id @default(autoincrement())
  name           String?          @db.VarChar(200)
  email          String?          @db.VarChar(200)
  country_id     Int?
  agency_id      Int
  agent_type_id  Int
  bank_id        Int?
  is_has_nominee Boolean?         @default(false)
  is_deleted     Boolean?         @default(false)
  created_time   DateTime?        @default(now()) @db.DateTime(0)
  updated_time   DateTime?        @default(now()) @db.DateTime(0)
  agency         agency           @relation(fields: [agency_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_agency_id")
  bank           bank?            @relation(fields: [bank_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_agent_bank_id")
  country        country?         @relation(fields: [country_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_agent_country_id")
  agent_type     agentType        @relation(fields: [agent_type_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_agent_type_id")
  emails         email[]
  process_log    process_log[]
  task_has_agent task_has_agent[]
  token          token[]

  @@index([agency_id], map: "fk_agency_id")
  @@index([bank_id], map: "fk_agent_bank_id_idx")
  @@index([country_id], map: "fk_agent_country_id")
  @@index([agent_type_id], map: "fk_agent_type_id")
}

// TODO: x√≥a model agentType
/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model agentType {
  id         Int      @id @default(autoincrement())
  name       String   @db.VarChar(100)
  is_deleted Boolean? @default(false)
  agent      agent[]
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model airport {
  id         Int         @id @default(autoincrement())
  name       String?     @db.Text
  is_deleted Int         @default(0) @db.TinyInt
  customer   customer[]
  service    service[]
  visaOrder  visaOrder[]
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model answer {
  id                Int             @id @default(autoincrement())
  value_int         Int?
  value_text        String?         @db.Text
  option_id         Int
  task_id           Int?
  fatca_id          Int?
  select_country_id Int?
  company_member_id Int?
  question_id       Int?
  is_deleted        Boolean         @default(false)
  created_time      DateTime        @default(now()) @db.DateTime(0)
  updated_time      DateTime        @default(now()) @db.DateTime(0)
  company_id        Int?
  company_member    company_member? @relation(fields: [company_member_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_ans_company_member_id_com_id_ebc4")
  option            option          @relation(fields: [option_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_ans_option_id_opt_id_iwe6")
  question          question?       @relation(fields: [question_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_ans_question_id_que_id_75r")
  country           country?        @relation(fields: [select_country_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_ans_select_country_id_cou_id_av5b")
  task              task?           @relation(fields: [task_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_ans_task_id_tas_id_b8wm")
  company           company?        @relation(fields: [company_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_answer_company")

  @@index([question_id], map: "fk_ans_question_id_que_id_75r")
  @@index([company_id], map: "fk_answer_company_idx")
  @@index([company_member_id], map: "fk_answer_company_member_id")
  @@index([select_country_id], map: "fk_answer_country_idx")
  @@index([option_id], map: "fk_answer_has_option_idx")
  @@index([task_id], map: "fk_answer_task_idx")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model api {
  id               Int           @id @default(autoincrement())
  url              String        @db.VarChar(255)
  api_method_id    Int
  note             Json?
  is_recaptcha     Boolean?      @default(false)
  is_authorization Boolean?      @default(false)
  description      String?       @db.Text
  created_time     DateTime?     @default(now()) @db.DateTime(0)
  updated_time     DateTime?     @default(now()) @db.DateTime(0)
  is_deleted       Boolean       @default(false)
  apiMethod        apiMethod     @relation(fields: [api_method_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_api_api_method")
  apiExamples      apiExample[]
  apiHasGroups     apiHasGroup[]

  @@index([api_method_id], map: "fk_api_api_method")
}

model apiExample {
  id            Int       @id @default(autoincrement())
  api_id        Int
  body          Json?
  param         Json?
  query         Json?
  api_status_id Int
  response      Json
  description   String?   @db.Text
  api_group_id  Int?
  created_time  DateTime? @default(now()) @db.DateTime(0)
  updated_time  DateTime? @default(now()) @db.DateTime(0)
  is_deleted    Boolean   @default(false)
  apiStatus     apiStatus @relation(fields: [api_status_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_api_api_status_id_api_id_5l43")
  apiGroup      apiGroup? @relation(fields: [api_group_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_api_example_group")
  api           api       @relation(fields: [api_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_api_response_api")
  file          file[]

  @@index([api_group_id], map: "fk_api_example_group_idx")
  @@index([api_id], map: "fk_api_response_api")
  @@index([api_status_id], map: "fk_api_response_status")
}

model apiGroup {
  id           Int           @id @default(autoincrement())
  name         String        @db.VarChar(255)
  description  String?       @db.Text
  created_time DateTime?     @default(now()) @db.DateTime(0)
  updated_time DateTime?     @default(now()) @db.DateTime(0)
  is_deleted   Boolean       @default(false)
  apiExamples  apiExample[]
  apiHasGroups apiHasGroup[]
}

model apiHasGroup {
  id           Int       @id @default(autoincrement())
  api_id       Int
  api_group_id Int
  description  String?   @db.Text
  created_time DateTime? @default(now()) @db.DateTime(0)
  updated_time DateTime? @default(now()) @db.DateTime(0)
  is_deleted   Boolean   @default(false)
  apiGroup     apiGroup  @relation(fields: [api_group_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_api_api_group_id_api_id_i0p")
  api          api       @relation(fields: [api_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_api_has_group_api")

  @@index([api_group_id], map: "fk_api_has_group_api_group_idx")
  @@index([api_id], map: "fk_api_has_group_api_idx")
}

model apiMethod {
  id           Int       @id @default(autoincrement())
  name         String    @db.VarChar(45)
  description  String?   @db.Text
  created_time DateTime? @default(now()) @db.DateTime(0)
  updated_time DateTime? @default(now()) @db.DateTime(0)
  is_deleted   Boolean   @default(false)
  api          api[]
  syslog       syslog[]
}

model apiStatus {
  id           Int          @id @default(autoincrement())
  code         String       @db.VarChar(45)
  description  String?      @db.Text
  created_time DateTime?    @default(now()) @db.DateTime(0)
  updated_time DateTime?    @default(now()) @db.DateTime(0)
  is_deleted   Boolean      @default(false)
  apiExample   apiExample[]
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model bank {
  id                     Int                   @id @default(autoincrement())
  name                   String                @db.VarChar(100)
  image                  String?               @db.VarChar(200)
  country_id             Int?
  initial_deposit        Int?
  is_virtual             Boolean?              @default(false)
  is_deleted             Boolean?              @default(false)
  actionProcessStep      actionProcessStep[]
  agent                  agent[]
  country                country?              @relation(fields: [country_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_bank_country1")
  bank_branch            bankBranch[]
  bank_has_country       bankHasCountry[]
  bank_has_file_template bankHasFileTemplate[]
  bank_has_keyword       bankHasKeyword[]
  banking_process        bankingProcess[]
  customer_has_bank      customer_has_bank[]
  order_has_bank         order_has_bank[]

  @@index([country_id], map: "fk_bank_country1_idx")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model bankBranch {
  id              Int              @id @default(autoincrement())
  name            String?          @db.VarChar(200)
  address         String?          @db.VarChar(200)
  bank_id         Int?
  is_deleted      Int?             @default(0) @db.TinyInt
  bank            bank?            @relation(fields: [bank_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_branch_bank_id")
  banking_process bankingProcess[]

  @@index([bank_id], map: "fk_branch_bank_id_idx")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model bankHasCountry {
  id                       Int      @id @default(autoincrement())
  bank_id                  Int?
  country_id               Int?
  is_member_country        Boolean? @default(false)
  is_partner_country       Boolean? @default(false)
  is_owner_country         Boolean? @default(false)
  is_incorporation_country Boolean? @default(false)
  is_remote_opening        Boolean? @default(false)
  score                    Int?     @default(0)
  bank                     bank?    @relation(fields: [bank_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "bc_bank_fk")
  country                  country? @relation(fields: [country_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "bc_country_fk")

  @@unique([bank_id, country_id], map: "bank_country_id")
  @@index([country_id], map: "bc_country_fk")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model bankHasFileTemplate {
  bank_id          Int
  file_template_id Int
  bank             bank          @relation(fields: [bank_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_ban_bank_id_ban_id_ftar")
  file_template    file_template @relation(fields: [file_template_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_ban_file_template_id_fil_id_8koe")

  @@id([bank_id, file_template_id])
  @@index([file_template_id], map: "fk_ban_file_template_id_fil_id_8koe")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model bankHasKeyword {
  id      Int     @id @default(autoincrement())
  bank_id Int?
  keyword String? @db.Text
  bank    bank?   @relation(fields: [bank_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "bank_has_keyword_ibfk_1")

  @@index([bank_id], map: "bank_key_fk")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model bankingProcess {
  id                             Int             @id @default(autoincrement())
  task_id                        Int?
  bank_id                        Int?
  status                         Int?            @default(0)
  client_time                    BigInt?
  content                        String?         @db.VarChar(200)
  bank_branch_id                 Int?
  contact_person                 String?         @db.VarChar(100)
  title_job                      String?         @db.VarChar(100)
  phone                          String?         @db.VarChar(45)
  application_set_tracking_code  String?         @db.VarChar(100)
  application_form_tracking_code String?         @db.VarChar(100)
  url_video                      String?         @db.VarChar(200)
  created_time                   DateTime?       @default(now()) @db.DateTime(0)
  updated_time                   DateTime?       @default(now()) @db.DateTime(0)
  is_deleted                     Boolean?        @default(false)
  phone_country_id               Int?
  phone_number                   String?         @db.VarChar(45)
  bank_address                   String?         @db.Text
  bank_branch                    bankBranch?     @relation(fields: [bank_branch_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_ban_bank_branch_id_ban_id_iwfs")
  bank                           bank?           @relation(fields: [bank_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_ban_bank_id_ban_id_4zbr")
  country                        country?        @relation(fields: [phone_country_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_ban_phone_country_id_cou_id_b07m")
  task                           task?           @relation(fields: [task_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_ban_task_id_tas_id_k2c2")
  process                        process[]
  proposed_time                  proposed_time[]

  @@index([bank_id], map: "fk_bank_banking_process")
  @@index([bank_branch_id], map: "fk_bank_branch_id")
  @@index([phone_country_id], map: "fk_phone_country_id")
  @@index([task_id], map: "fk_task_banking_process")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model billing {
  id                                        Int               @id @default(autoincrement())
  country_id                                Int?
  user_id                                   Int?
  customer_id                               Int?
  name                                      String?           @db.Text
  postal_code                               String?           @db.VarChar(45)
  phone                                     String?           @db.VarChar(45)
  address                                   String?           @db.Text
  address_1                                 String?           @db.Text
  first_name                                String?           @db.VarChar(200)
  last_name                                 String?           @db.VarChar(200)
  tax_id                                    String?           @db.VarChar(50)
  is_deleted                                Int?              @default(0) @db.TinyInt
  xero_contact_id                           String?           @unique(map: "xero_contact_id_UNIQUE") @db.VarChar(255)
  phone_country_id                          Int?
  phone_number                              String?           @db.VarChar(255)
  addition_process_id                       Int?
  state                                     String?           @db.VarChar(225)
  city                                      String?           @db.VarChar(225)
  created_time                              DateTime?         @default(now()) @db.DateTime(0)
  updated_time                              DateTime?         @default(now()) @db.DateTime(0)
  addition_process                          additionProcess?  @relation(fields: [addition_process_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_bil_addition_process_id_add_id_jsfm")
  country                                   country?          @relation("billing_country_idTocountry", fields: [country_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_bil_country_id_cou_id_fnr3")
  customer                                  customer?         @relation(fields: [customer_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_bil_customer_id_cus_id_lb8c")
  country_billing_phone_country_idTocountry country?          @relation("billing_phone_country_idTocountry", fields: [phone_country_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_bil_phone_country_id_cou_id_2epb")
  user                                      user?             @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_bil_user_id_use_id_9qkj")
  company                                   company[]
  history_company                           history_company[]
  order                                     order[]

  @@index([country_id], map: "fk_bil_country_id_cou_id_fnr3")
  @@index([addition_process_id], map: "fk_billing_additional")
  @@index([customer_id], map: "fk_billing_customer1")
  @@index([phone_country_id], map: "fk_billing_has_phone_country_idx")
  @@index([user_id], map: "fk_billing_user1")
}

model businessActivity {
  id                                   Int                                    @id @default(autoincrement())
  name                                 String?                                @db.Text
  country_id                           Int?
  sic_code                             String?                                @db.VarChar(10)
  description                          String?                                @db.Text
  business_activity_industry_id        Int?
  label_ids                            Json?
  is_common                            Int                                    @default(0) @db.TinyInt
  is_deleted                           Boolean?                               @default(false)
  business_activity_industry           businessActivityIndustry?              @relation(fields: [business_activity_industry_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "business_activity_bussiness_activity_industry_fk1")
  country                              country?                               @relation(fields: [country_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "business_activity_ibfk_1")
  company_has_business_activity        company_has_business_activity[]
  company_member_has_business_activity company_member_has_business_activity[]

  @@index([business_activity_industry_id], map: "business_activity_bussiness_activity_industry_fk1_idx")
  @@index([country_id], map: "fk_business_activity_country")
}

model businessActivityIndustry {
  id                                  Int                            @id @default(autoincrement())
  name                                String?                        @db.Text
  country_id                          Int?
  parent_id                           Int?
  parent_ids                          Json?
  business_activity_industry_class_id Int?
  is_deleted                          Boolean?                       @default(false)
  sic_code                            String?                        @db.VarChar(10)
  business_activity                   businessActivity[]
  business_activity_industry_class    businessActivityIndustryClass? @relation(fields: [business_activity_industry_class_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_business_activity_industry_business_activity_industry_class1")
  customer                            customer[]

  @@index([business_activity_industry_class_id], map: "fk_business_activity_industry_business_activity_industry_cl_idx")
}

// TODO: delete model businessActivityIndustryClass
/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model businessActivityIndustryClass {
  id                         Int                        @id @default(autoincrement())
  name                       String                     @db.VarChar(45)
  is_deleted                 Boolean                    @default(false)
  business_activity_industry businessActivityIndustry[]
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model businessActivityLabel {
  id         Int     @id @default(autoincrement())
  name       String  @db.Text
  is_deleted Boolean @default(false)
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model campaign {
  id                        Int                      @id @default(autoincrement())
  name                      String?                  @db.VarChar(100)
  description               String?                  @db.Text
  is_deleted                Int                      @default(0) @db.TinyInt
  campaign_type_id          Int?
  campaign_type             campaignType?            @relation(fields: [campaign_type_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_campaign_type")
  campaign_has_voucher_type campaignHasVoucherType[]
  customer                  customer[]

  @@index([campaign_type_id], map: "fk_campaign__type_idx")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model campaignHasVoucherType {
  campaign_id        Int
  voucher_type_id    Int
  total_quantity     Int?
  remaining_quantity Int?
  percent            Int?
  config             Json?
  campaign           campaign     @relation(fields: [campaign_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_campaign_voucher_type_1")
  voucher_type       voucher_type @relation(fields: [voucher_type_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_campaign_voucher_type_2")

  @@id([campaign_id, voucher_type_id])
  @@index([voucher_type_id], map: "fk_campaign_voucher_type_2_idx")
}

// TODO: delete model campaignType
/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model campaignType {
  id         Int        @id @default(autoincrement())
  name       String?    @db.VarChar(225)
  is_deleted Int?       @default(0) @db.TinyInt
  campaign   campaign[]
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model carSeat {
  id         Int       @id @default(autoincrement())
  name       String?   @db.Text
  is_deleted Int       @default(0) @db.TinyInt
  baby_max   Int?      @default(0)
  value      Int?      @default(0)
  service    service[]
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model carType {
  id         Int       @id @default(autoincrement())
  name       String?   @db.Text
  is_deleted Int       @default(0) @db.TinyInt
  service    service[]
}

model changeRequest {
  id                        Int                 @id @default(autoincrement())
  task_id                   Int?
  company_id                Int?
  change_request_status_id  Int
  company_member_id         Int?
  company_position_id       Int?
  to_company_member_id      Int?
  to_company_position_id    Int?
  is_approved               Boolean?            @default(false)
  is_deleted                Boolean?            @default(false)
  created_time              DateTime?           @default(now()) @db.DateTime(0)
  updated_time              DateTime?           @default(now()) @db.DateTime(0)
  change_request_related_id Int?
  company                   company?            @relation(fields: [company_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_change_request_company_id")
  company_member            company_member?     @relation(fields: [company_member_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_change_request_company_member_id")
  company_position          company_position?   @relation(fields: [company_position_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_change_request_company_position_id")
  change_request_status     changeRequestStatus @relation(fields: [change_request_status_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_change_request_status_id")
  task                      task?               @relation(fields: [task_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_change_request_task_id")
  change_request_item       changeRequestItem[]
  file                      file[]

  @@index([company_id], map: "fk_change_request_company_id_idx")
  @@index([company_member_id], map: "fk_change_request_company_member_idx")
  @@index([company_position_id], map: "fk_change_request_company_position_id_idx")
  @@index([change_request_status_id], map: "fk_change_request_status_idx")
  @@index([task_id], map: "fk_change_request_task_idx")
}

model changeRequestItem {
  id                Int           @id @default(autoincrement())
  change_request_id Int
  model             String        @db.VarChar(100)
  field_name        String        @db.VarChar(100)
  value             String?       @db.Text
  is_fee            Boolean?      @default(true)
  data_type         String        @db.VarChar(45)
  target_id         Int?
  is_deleted        Boolean?      @default(false)
  created_time      DateTime?     @default(now()) @db.DateTime(0)
  updated_time      DateTime?     @default(now()) @db.DateTime(0)
  changeRequest     changeRequest @relation(fields: [change_request_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_change_request_item")

  @@index([change_request_id], map: "fk_change_request_item_idx")
}

model changeRequestStatus {
  id                     Int                      @id @default(autoincrement())
  name                   String                   @db.VarChar(45)
  is_deleted             Boolean?                 @default(false)
  created_time           DateTime?                @default(now()) @db.DateTime(0)
  updated_time           DateTime?                @default(now()) @db.DateTime(0)
  change_request         changeRequest[]
  service_change_officer service_change_officer[]
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model click {
  id               Int           @id @default(autoincrement())
  is_deleted       Int?          @default(0) @db.TinyInt
  google_client_id String?       @db.VarChar(225)
  ip_address       String?       @db.VarChar(45)
  voucher_type_id  Int?
  created_time     DateTime?     @default(now()) @db.DateTime(0)
  updated_time     DateTime?     @default(now()) @db.DateTime(0)
  voucher_type     voucher_type? @relation(fields: [voucher_type_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_cli_voucher_type_id_vou_id_35e5")

  @@index([voucher_type_id], map: "fk_click_voucher_type")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model company {
  id                                            Int                             @id @default(autoincrement())
  company_code                                  String?                         @db.VarChar(255)
  country_id                                    Int?
  company_reg_no                                String?                         @db.VarChar(255)
  name                                          String?                         @db.VarChar(255)
  company_status_id                             Int?                            @default(1)
  entity_type_id                                Int?
  company_suffix_id                             Int?
  preventive_name                               String?                         @db.VarChar(255)
  address                                       String?                         @db.VarChar(255)
  tax                                           String?                         @db.VarChar(255)
  tin                                           String?                         @db.VarChar(45)
  description                                   String?                         @db.VarChar(255)
  note                                          String?                         @db.VarChar(255)
  incorporation_date                            DateTime?                       @db.DateTime(0)
  xero_contact_id                               String?                         @db.VarChar(255)
  business_activity                             String?                         @db.VarChar(255)
  is_outside_company                            Boolean?                        @default(false)
  is_deleted                                    Boolean?                        @default(false)
  renewal_date                                  DateTime?                       @db.DateTime(0)
  billing_id                                    Int?
  contact_full_name                             String?                         @db.VarChar(255)
  contact_phone                                 String?                         @db.VarChar(255)
  contact_email                                 String?                         @db.VarChar(255)
  contact_address                               String?                         @db.VarChar(255)
  tin_code                                      String?                         @db.VarChar(255)
  pin_code                                      String?                         @db.VarChar(255)
  contact_phone_country_id                      Int?
  contact_phone_number                          String?                         @db.VarChar(255)
  contact_state                                 String?                         @db.VarChar(255)
  contact_city                                  String?                         @db.VarChar(255)
  contact_postal_code                           String?                         @db.VarChar(255)
  operating_country_id                          Int?
  operating_city                                String?                         @db.VarChar(200)
  operating_state                               String?                         @db.VarChar(200)
  operating_postal_code                         String?                         @db.VarChar(20)
  source_fund                                   String?                         @db.VarChar(255)
  business_full_name                            String?                         @db.VarChar(200)
  business_address                              String?                         @db.VarChar(200)
  business_country_id                           Int?
  business_city                                 String?                         @db.VarChar(200)
  business_state                                String?                         @db.VarChar(200)
  business_postal_code                          String?                         @db.VarChar(20)
  business_day_end                              Int?
  business_month_end                            Int?
  share_capital_par_value                       Int?
  share_capital_type_of_share                   Int?
  share_capital_number_share                    Int?
  share_capital                                 Int?
  share_capital_class_of_share                  String?                         @db.VarChar(255)
  issued_number_share                           Int?
  remaining_number_share                        Int?
  articles_of_organization                      Int?
  record_number                                 String?                         @db.VarChar(255)
  num_of_checking_bank                          Int?
  business_annual_report                        String?                         @db.VarChar(255)
  seal_image                                    String?                         @db.VarChar(255)
  left_checking_bank                            Int?
  created_time                                  DateTime?                       @default(now()) @db.DateTime(0)
  updated_time                                  DateTime?                       @default(now()) @db.DateTime(0)
  business_activity_detail                      String?                         @db.VarChar(255)
  version                                       Int?                            @default(0)
  answer                                        answer[]
  change_request                                changeRequest[]
  country_company_business_country_idTocountry  country?                        @relation("company_business_country_idTocountry", fields: [business_country_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_business_country_idx")
  billing                                       billing?                        @relation(fields: [billing_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_com_billing_id_bil_id_54hy")
  company_status                                company_status?                 @relation(fields: [company_status_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_com_company_status_id_com_id_k8i8")
  company_suffix                                company_suffix?                 @relation(fields: [company_suffix_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_com_company_suffix_id_com_id_4mj0")
  country_company_country_idTocountry           country?                        @relation("company_country_idTocountry", fields: [country_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_com_country_id_cou_id_3zlp")
  entity_type                                   entity_type?                    @relation(fields: [entity_type_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_com_entity_type_id_ent_id_ac66")
  country_company_operating_country_idTocountry country?                        @relation("company_operating_country_idTocountry", fields: [operating_country_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_com_operating_country_id_cou_id_7wn5")
  company_event                                 companyEvent[]
  company_has_business_activity                 company_has_business_activity[]
  company_has_currency                          company_has_currency[]
  company_has_operation_country                 company_has_operation_country[]
  company_interest                              company_interest[]
  company_member                                company_member[]
  company_ownership                             company_ownership[]
  company_share                                 company_share[]
  email                                         email[]
  file                                          file[]
  history_log_cdc                               history_log_cdc[]
  notes                                         note[]
  order                                         order[]
  proposed_name                                 proposed_name[]
  task                                          task[]

  @@index([business_country_id], map: "fk_business_country_idx")
  @@index([billing_id], map: "fk_com_billing_id_bil_id_7kx6")
  @@index([company_status_id], map: "fk_company_company_status1")
  @@index([company_suffix_id], map: "fk_company_company_suffix1")
  @@index([country_id], map: "fk_company_country1")
  @@index([operating_country_id], map: "fk_company_country_operating_fk1")
  @@index([entity_type_id], map: "fk_company_entity_type1")
}

model companyEvent {
  id                    Int               @id @default(autoincrement())
  company_id            Int
  service_id            Int
  name                  String            @db.VarChar(255)
  description           String?           @db.Text
  date_completed        DateTime?         @db.DateTime(0)
  due_date              DateTime?         @db.DateTime(0)
  date_remind           DateTime?         @db.DateTime(0)
  order_id              Int?
  created_time          DateTime?         @default(now()) @db.DateTime(0)
  updated_time          DateTime?         @default(now()) @db.DateTime(0)
  is_deleted            Boolean           @default(false)
  is_not_show           Int?              @default(0) @db.TinyInt
  company_event_type_id Int?
  is_notify_due_renewal Int?              @default(0) @db.TinyInt
  company_event_type    companyEventType? @relation(fields: [company_event_type_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_company_event_company_event_type_id")
  company               company           @relation(fields: [company_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_company_event_company_id")
  order                 order?            @relation(fields: [order_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_company_event_order_id")
  service               service           @relation(fields: [service_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_company_event_service_id")
  file                  file[]

  @@index([company_event_type_id], map: "fk_company_event_company_event_type_id_idx")
  @@index([company_id], map: "fk_company_event_company_id_idx")
  @@index([order_id], map: "fk_company_event_order_id_idx")
  @@index([service_id], map: "fk_company_event_service_id_idx")
}

model companyEventType {
  id            Int            @id @default(autoincrement())
  name          String?        @db.Text
  description   String?        @db.Text
  created_time  DateTime?      @default(now()) @db.DateTime(0)
  updated_time  DateTime?      @default(now()) @db.DateTime(0)
  is_deleted    Int?           @default(0) @db.TinyInt
  company_event companyEvent[]
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model company_has_business_activity {
  company_id           Int
  business_activity_id Int
  business_activity    businessActivity @relation(fields: [business_activity_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_com_business_activity_id_bus_id_ilau")
  company              company          @relation(fields: [company_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_com_company_id_com_id_6dx6")

  @@id([company_id, business_activity_id])
  @@index([business_activity_id], map: "fk_com_business_activity_id_bus_id_lems")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model company_has_currency {
  company_id  Int
  currency_id Int
  company     company  @relation(fields: [company_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_company_currency_1")
  currency    currency @relation(fields: [currency_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_company_currency_2")

  @@id([company_id, currency_id])
  @@index([currency_id], map: "fk_company_currency_2_idx")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model company_has_operation_country {
  company_id Int
  country_id Int
  company    company @relation(fields: [company_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_company_has_operation_country_company_id_1")
  country    country @relation(fields: [country_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_company_has_operation_country_country_id_1")

  @@id([company_id, country_id])
  @@index([country_id], map: "fk_company_operation_country_2_idx")
}

model company_interest {
  id                                                                            Int               @id @default(autoincrement())
  task_id                                                                       Int?
  no                                                                            Int?
  company_id                                                                    Int
  company_member_id                                                             Int
  company_position_id                                                           Int?
  corporation_company_member_id                                                 Int?
  start_number                                                                  Int?              @db.TinyInt
  end_number                                                                    Int?              @db.TinyInt
  value                                                                         Float             @db.Float
  is_valid                                                                      Int?              @default(0)
  is_approved                                                                   Int?              @default(0)
  issued_file_id                                                                Int?
  issued_dated                                                                  DateTime?         @default(now()) @db.DateTime(0)
  expired_dated                                                                 DateTime?         @default(now()) @db.DateTime(0)
  created_time                                                                  DateTime?         @default(now()) @db.DateTime(0)
  updated_time                                                                  DateTime?         @default(now()) @db.DateTime(0)
  is_deleted                                                                    Boolean?          @default(false)
  deleted_time                                                                  DateTime?         @db.DateTime(0)
  company_position                                                              company_position? @relation(fields: [company_position_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_company_interest_position")
  task                                                                          task?             @relation(fields: [task_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_company_interest_task_id")
  company                                                                       company           @relation(fields: [company_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_company_membership_company_id1")
  company_member_company_interest_company_member_idTocompany_member             company_member    @relation("company_interest_company_member_idTocompany_member", fields: [company_member_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_company_membership_company_member_id1")
  company_member_company_interest_corporation_company_member_idTocompany_member company_member?   @relation("company_interest_corporation_company_member_idTocompany_member", fields: [corporation_company_member_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_company_membership_corporation_company_member_id1")

  @@index([issued_file_id], map: "fk_company_interest_issued_file_id_idx")
  @@index([company_position_id], map: "fk_company_interest_position")
  @@index([task_id], map: "fk_company_interest_task_id_idx")
  @@index([company_id], map: "fk_company_membership_company_id_idx")
  @@index([company_member_id], map: "fk_company_membership_company_member_id_idx")
  @@index([corporation_company_member_id], map: "fk_company_membership_corporation_company_member_id_idx")
}

model company_member {
  id                                                                                Int                                    @id @default(autoincrement())
  company_id                                                                        Int?
  country_id                                                                        Int?
  type_member_id                                                                    Int?
  first_name                                                                        String?                                @db.VarChar(255)
  last_name                                                                         String?                                @db.VarChar(255)
  corporation_name                                                                  String?                                @db.VarChar(255)
  corporation_number                                                                String?                                @db.VarChar(255)
  corporation_date                                                                  DateTime?                              @db.DateTime(0)
  gender_id                                                                         Int?
  major                                                                             String?                                @db.VarChar(255)
  phone                                                                             String?                                @db.VarChar(255)
  email                                                                             String?                                @db.VarChar(255)
  birthday                                                                          DateTime?                              @db.DateTime(0)
  birth_country_id                                                                  Int?
  address                                                                           String?                                @db.VarChar(255)
  passport                                                                          String?                                @db.VarChar(255)
  passport_issue_date                                                               DateTime?                              @db.DateTime(0)
  passport_expire_date                                                              String?                                @db.Text
  ssn                                                                               String?                                @db.VarChar(255)
  description                                                                       String?                                @db.VarChar(255)
  is_deleted                                                                        Int?                                   @default(0)
  phone_country_id                                                                  Int?
  phone_number                                                                      String?                                @db.VarChar(255)
  asset_source_fund_cast_in_bank                                                    Int?
  asset_source_fund_real_estate                                                     Int?
  asset_source_fund_other_detail                                                    String?                                @db.VarChar(255)
  asset_source_fund_other_money                                                     Int?
  income_source_fund_investment                                                     Int?
  income_source_fund_self_employed                                                  Int?
  income_source_fund_other_detail                                                   String?                                @db.VarChar(255)
  income_source_fund_other_money                                                    Int?
  is_nominee                                                                        Int?
  is_approved                                                                       Boolean?                               @default(false)
  business_activity_detail                                                          String?                                @db.Text
  updated_time                                                                      DateTime                               @default(now()) @db.DateTime(0)
  parent_id                                                                         Int?
  service_address                                                                   String?                                @db.VarChar(255)
  operation_address                                                                 String?                                @db.VarChar(255)
  nature_business                                                                   String?                                @db.VarChar(255)
  relationship_intended_company                                                     String?                                @db.VarChar(255)
  city                                                                              String?                                @db.VarChar(255)
  state                                                                             String?                                @db.VarChar(255)
  postal_code                                                                       String?                                @db.VarChar(255)
  address_country_id                                                                Int?
  created_time                                                                      DateTime                               @default(now()) @db.DateTime(0)
  middle_name                                                                       String?                                @db.VarChar(255)
  full_name                                                                         String?                                @db.VarChar(255)
  deleted_time                                                                      DateTime?                              @db.DateTime(0)
  answer                                                                            answer[]
  change_request                                                                    changeRequest[]
  company_interest_company_interest_company_member_idTocompany_member               company_interest[]                     @relation("company_interest_company_member_idTocompany_member")
  company_interest_company_interest_corporation_company_member_idTocompany_member   company_interest[]                     @relation("company_interest_corporation_company_member_idTocompany_member")
  country_company_member_birth_country_idTocountry                                  country?                               @relation("company_member_birth_country_idTocountry", fields: [birth_country_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "company_member_ibfk_1")
  country_company_member_address_country_idTocountry                                country?                               @relation("company_member_address_country_idTocountry", fields: [address_country_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_com_address_country_id_cou_id_bsct")
  company                                                                           company?                               @relation(fields: [company_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_com_company_id_com_id_8spf")
  country_company_member_country_idTocountry                                        country?                               @relation("company_member_country_idTocountry", fields: [country_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_com_country_id_cou_id_anef")
  gender                                                                            gender?                                @relation(fields: [gender_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_com_gender_id_gen_id_fm51")
  country_company_member_phone_country_idTocountry                                  country?                               @relation("company_member_phone_country_idTocountry", fields: [phone_country_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_com_phone_country_id_cou_id_gt1d")
  type_member                                                                       type_member?                           @relation(fields: [type_member_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_com_type_member_id_typ_id_exr8")
  company_member_has_business_activity                                              company_member_has_business_activity[]
  company_member_has_operation_country                                              company_member_has_operation_country[]
  company_member_reference                                                          company_member_reference[]
  company_ownership_company_ownership_company_member_idTocompany_member             company_ownership[]                    @relation("company_ownership_company_member_idTocompany_member")
  company_ownership_company_ownership_corporation_company_member_idTocompany_member company_ownership[]                    @relation("company_ownership_corporation_company_member_idTocompany_member")
  company_position_company_position_company_member_idTocompany_member               company_position[]                     @relation("company_position_company_member_idTocompany_member")
  company_position_company_position_corporation_company_member_idTocompany_member   company_position[]                     @relation("company_position_corporation_company_member_idTocompany_member")
  company_share_company_share_company_member_idTocompany_member                     company_share[]                        @relation("company_share_company_member_idTocompany_member")
  company_share_company_share_corporation_company_member_idTocompany_member         company_share[]                        @relation("company_share_corporation_company_member_idTocompany_member")
  emails                                                                            email[]
  fatca                                                                             fatca[]
  file_file_company_member_idTocompany_member                                       file[]                                 @relation("file_company_member_idTocompany_member")
  file_file_filled_by_company_member_idTocompany_member                             file[]                                 @relation("file_filled_by_company_member_idTocompany_member")
  note                                                                              note[]
  payment_information                                                               payment_information[]
  process_log_process_log_belong_to_company_member_idTocompany_member               process_log[]                          @relation("process_log_belong_to_company_member_idTocompany_member")
  process_log_process_log_company_member_idTocompany_member                         process_log[]                          @relation("process_log_company_member_idTocompany_member")
  task_task_appointed_director_company_member_idTocompany_member                    task[]                                 @relation("task_appointed_director_company_member_idTocompany_member")
  task_task_appointed_president_company_member_idTocompany_member                   task[]                                 @relation("task_appointed_president_company_member_idTocompany_member")
  task_task_appointed_shareholder_company_member_idTocompany_member                 task[]                                 @relation("task_appointed_shareholder_company_member_idTocompany_member")
  task_task_appointed_ubo_company_member_idTocompany_member                         task[]                                 @relation("task_appointed_ubo_company_member_idTocompany_member")
  token_token_belong_to_company_member_idTocompany_member                           token[]                                @relation("token_belong_to_company_member_idTocompany_member")
  token_token_company_member_idTocompany_member                                     token[]                                @relation("token_company_member_idTocompany_member")

  @@index([birth_country_id], map: "company_member_ibfk_1")
  @@index([address_country_id], map: "fk_com_address_country_id_cou_id_bsct")
  @@index([company_id], map: "fk_company_member_company1")
  @@index([country_id], map: "fk_company_member_countrya")
  @@index([gender_id], map: "fk_company_member_gender1")
  @@index([phone_country_id], map: "fk_company_member_has_phone_country_idx")
  @@index([type_member_id], map: "fk_company_member_type_member_idx")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model company_member_has_business_activity {
  company_member_id    Int
  business_activity_id Int
  company_member       company_member   @relation(fields: [company_member_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_company_member_has_business_activity_1")
  business_activity    businessActivity @relation(fields: [business_activity_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_company_member_has_business_activity_2")

  @@id([company_member_id, business_activity_id])
  @@index([business_activity_id], map: "fk_company_member_has_business_activity_2")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model company_member_has_operation_country {
  company_member_id Int
  country_id        Int
  company_member    company_member @relation(fields: [company_member_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_company_member_has_operation_country_1")
  country           country        @relation(fields: [country_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_company_member_has_operation_country_2")

  @@id([company_member_id, country_id])
  @@index([country_id], map: "fk_company_member_has_operation_country_2_idx")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments

model company_member_issuse_reference {
  id                       Int                        @id @default(autoincrement())
  name                     String?                    @db.VarChar(100)
  created_time             DateTime?                  @default(now()) @db.DateTime(0)
  updated_time             DateTime?                  @default(now()) @db.DateTime(0)
  is_deleted               Int?                       @default(0) @db.TinyInt
  company_member_reference company_member_reference[]
}

model company_member_reference {
  id                                 Int                              @id @default(autoincrement())
  name                               String?                          @db.VarChar(255)
  phone_number                       String?                          @db.VarChar(255)
  phone_country_id                   Int?
  fax                                String?                          @db.VarChar(255)
  email                              String?                          @db.VarChar(255)
  address                            String?                          @db.VarChar(255)
  created_time                       DateTime?                        @default(now()) @db.DateTime(0)
  updated_time                       DateTime?                        @default(now()) @db.DateTime(0)
  is_deleted                         String?                          @default("0") @db.VarChar(255)
  company_member_issuse_reference_id Int?
  company_member_id                  Int?
  company_member                     company_member?                  @relation(fields: [company_member_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_com_company_member_id_com_id_921r")
  company_member_issuse_reference    company_member_issuse_reference? @relation(fields: [company_member_issuse_reference_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_com_company_member_issuse_reference_id_com_id_hwvb")
  country                            country?                         @relation(fields: [phone_country_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_com_phone_country_id_cou_id_8vzn")

  @@index([company_member_id], map: "fk_com_company_member_id_com_id_921r")
  @@index([company_member_issuse_reference_id], map: "fk_com_company_member_issuse_reference_id_com_id_hwvb")
  @@index([phone_country_id], map: "fk_com_phone_country_id_cou_id_8vzn")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model company_member_type {
  id                                    Int                                     @id @default(autoincrement())
  name                                  String?                                 @db.VarChar(45)
  description                           String?                                 @db.Text
  parent_id                             Int?
  is_deleted                            Int                                     @default(0) @db.TinyInt
  is_required                           Boolean?
  company_member_type                   company_member_type?                    @relation("company_member_typeTocompany_member_type", fields: [parent_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_parent_member_type_id")
  other_company_member_type             company_member_type[]                   @relation("company_member_typeTocompany_member_type")
  company_position                      company_position[]
  file_template_has_company_member_type file_template_has_company_member_type[]
  service_change_officer                service_change_officer[]
  service_has_company_member_type       service_has_company_member_type[]       @ignore

  @@index([parent_id], map: "fk_parent_member_type_id_idx")
}

model company_ownership {
  id                                                                             Int               @id @default(autoincrement())
  task_id                                                                        Int?
  no                                                                             Int?
  company_id                                                                     Int
  company_member_id                                                              Int
  company_position_id                                                            Int?
  corporation_company_member_id                                                  Int?
  value                                                                          Float             @db.Float
  is_valid                                                                       Int?              @default(0)
  is_approved                                                                    Int?              @default(0)
  issued_file_id                                                                 Int?
  issued_dated                                                                   DateTime?         @default(now()) @db.DateTime(0)
  expired_dated                                                                  DateTime?         @default(now()) @db.DateTime(0)
  created_time                                                                   DateTime?         @default(now()) @db.DateTime(0)
  updated_time                                                                   DateTime?         @default(now()) @db.DateTime(0)
  is_deleted                                                                     Boolean?          @default(false)
  deleted_time                                                                   DateTime?         @db.DateTime(0)
  company                                                                        company           @relation(fields: [company_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_company_own_company_id")
  company_member_company_ownership_company_member_idTocompany_member             company_member    @relation("company_ownership_company_member_idTocompany_member", fields: [company_member_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_company_own_company_member_id")
  company_member_company_ownership_corporation_company_member_idTocompany_member company_member?   @relation("company_ownership_corporation_company_member_idTocompany_member", fields: [corporation_company_member_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_company_own_corporation_company_member_id")
  company_position                                                               company_position? @relation(fields: [company_position_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_company_ownership_position")
  task                                                                           task?             @relation(fields: [task_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_company_ownership_task_id")

  @@index([issued_file_id], map: "fk_company_interest_issued_file_id_idx")
  @@index([company_id], map: "fk_company_own_company_id_idx")
  @@index([company_member_id], map: "fk_company_own_company_member_id_idx")
  @@index([corporation_company_member_id], map: "fk_company_own_corporation_company_member_id_idx")
  @@index([company_position_id], map: "fk_company_ownership_position")
  @@index([task_id], map: "fk_company_ownership_task_id_idx")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model company_position {
  id                                                                            Int                 @id @default(autoincrement())
  company_member_id                                                             Int
  company_member_type_id                                                        Int
  corporation_company_member_id                                                 Int?
  number_allotted                                                               Int?                @default(0)
  percent_of_interest                                                           Float?              @default(0)
  own_percent                                                                   Float?              @default(0) @db.Float
  date_of_appointment                                                           DateTime?           @db.Date
  date_of_resign                                                                DateTime?           @db.Date
  created_time                                                                  DateTime?           @default(now()) @db.DateTime(0)
  updated_time                                                                  DateTime?           @default(now()) @db.DateTime(0)
  is_appointed                                                                  Boolean?
  is_approved                                                                   Boolean?            @default(false)
  is_deleted                                                                    Boolean?            @default(false)
  is_contact_person                                                             Boolean?
  relationship_with_company                                                     Json?
  is_handle_relationship_contact_person                                         Boolean?
  position_detail                                                               String?             @db.VarChar(255)
  deleted_time                                                                  DateTime?           @db.DateTime(0)
  change_request                                                                changeRequest[]
  company_interest                                                              company_interest[]
  company_ownership                                                             company_ownership[]
  company_member_company_position_company_member_idTocompany_member             company_member      @relation("company_position_company_member_idTocompany_member", fields: [company_member_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_com_company_member_id_com_id_4m4n")
  company_member_type                                                           company_member_type @relation(fields: [company_member_type_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_com_company_member_type_id_com_id_8ruc")
  company_member_company_position_corporation_company_member_idTocompany_member company_member?     @relation("company_position_corporation_company_member_idTocompany_member", fields: [corporation_company_member_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_com_corporation_company_member_id_com_id_58a7")
  company_share                                                                 company_share[]

  @@index([company_member_type_id], map: "fk_com_company_member_type_id_com_id_8ruc")
  @@index([company_member_id], map: "fk_position_company_member_idx")
  @@index([corporation_company_member_id], map: "fk_position_corporation_company_member_idx")
}

model company_share {
  id                                                                         Int               @id @default(autoincrement())
  task_id                                                                    Int?
  no                                                                         Int?
  company_id                                                                 Int
  company_member_id                                                          Int
  company_position_id                                                        Int?
  corporation_company_member_id                                              Int?
  start_number                                                               BigInt?
  end_number                                                                 BigInt?
  value                                                                      BigInt
  is_valid                                                                   Int?              @default(0)
  is_approved                                                                Int?              @default(0)
  issued_file_id                                                             Int?
  issued_dated                                                               DateTime?         @default(now()) @db.DateTime(0)
  expired_dated                                                              DateTime?         @default(now()) @db.DateTime(0)
  created_time                                                               DateTime?         @default(now()) @db.DateTime(0)
  updated_time                                                               DateTime?         @default(now()) @db.DateTime(0)
  is_deleted                                                                 Boolean?          @default(false)
  deleted_time                                                               DateTime?         @db.DateTime(0)
  file                                                                       file?             @relation(fields: [issued_file_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_company_interest_issued_file_id")
  company                                                                    company           @relation(fields: [company_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_company_share_company_id")
  company_member_company_share_company_member_idTocompany_member             company_member    @relation("company_share_company_member_idTocompany_member", fields: [company_member_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_company_share_company_member_id")
  company_member_company_share_corporation_company_member_idTocompany_member company_member?   @relation("company_share_corporation_company_member_idTocompany_member", fields: [corporation_company_member_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_company_share_corporation_company_member_id")
  company_position                                                           company_position? @relation(fields: [company_position_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_company_share_position")
  task                                                                       task?             @relation(fields: [task_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_company_share_task_id")

  @@index([issued_file_id], map: "fk_company_interest_issued_file_id_idx")
  @@index([company_id], map: "fk_company_share_company_id")
  @@index([company_member_id], map: "fk_company_share_company_member_id")
  @@index([corporation_company_member_id], map: "fk_company_share_corporation_company_member_id_idx")
  @@index([company_position_id], map: "fk_company_share_position")
  @@index([task_id], map: "fk_company_share_task_id_idx")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model company_status {
  id              Int               @id
  name            String?           @db.VarChar(45)
  is_deleted      Int               @default(0) @db.TinyInt
  created_time    DateTime          @default(now()) @db.DateTime(0)
  updated_time    DateTime          @default(now()) @db.DateTime(0)
  company         company[]
  history_company history_company[]
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model company_suffix {
  id                             Int                              @id @default(autoincrement())
  name                           String?                          @db.VarChar(45)
  description                    String?                          @db.Text
  is_prefix                      Int                              @default(0) @db.TinyInt
  is_deleted                     Int                              @default(0) @db.TinyInt
  company                        company[]
  country_has_company_suffix     country_has_company_suffix[]
  customer                       customer[]
  entity_type_has_company_suffix entity_type_has_company_suffix[]
  history_company                history_company[]
  proposed_name                  proposed_name[]
  service_has_company_suffix     service_has_company_suffix[]
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model contact_from {
  id                   Int                    @id @default(autoincrement())
  name                 String?                @db.VarChar(50)
  description          String?                @db.Text
  is_deleted           Int                    @default(0) @db.TinyInt
  created_time         DateTime?              @default(now()) @db.DateTime(0)
  updated_time         DateTime?              @db.DateTime(0)
  type                 Int?                   @default(2)
  contact_from_history contact_from_history[]
  customer             customer[]
  mailchimp_tag        mailchimp_tag[]
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model contact_from_history {
  id              Int           @id @default(autoincrement())
  customer_id     Int?
  contact_from_id Int?
  tag_name        String?       @db.VarChar(255)
  created_time    DateTime?     @default(now()) @db.DateTime(0)
  is_deleted      Int?          @default(0) @db.TinyInt
  updated_time    DateTime?     @default(now()) @db.DateTime(0)
  contact_from    contact_from? @relation(fields: [contact_from_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "FK_his_from_contact_from_id")
  customer        customer?     @relation(fields: [customer_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "FK_his_from_customer_id")

  @@index([contact_from_id], map: "FK_his_from_contact_from_id")
  @@index([customer_id], map: "FK_his_from_customer_id")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model continent {
  id           Int       @id @default(autoincrement())
  name         String?   @db.VarChar(45)
  is_deleted   Int?      @default(0) @db.TinyInt
  created_time DateTime? @default(now()) @db.DateTime(0)
  updated_time DateTime? @default(now()) @db.DateTime(0)
  country      country[]
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model country {
  id                                                                        Int                                    @id @default(autoincrement())
  name                                                                      String?                                @db.VarChar(45)
  guid                                                                      String?                                @unique(map: "guid_UNIQUE") @db.VarChar(100)
  country_code                                                              String?                                @db.VarChar(45)
  phone_code                                                                String?                                @db.VarChar(45)
  is_restricted                                                             Int?                                   @default(0) @db.TinyInt
  is_deleted                                                                Boolean?                               @default(false)
  sub_name                                                                  String?                                @db.VarChar(255)
  is_country                                                                Boolean?                               @default(false)
  left                                                                      Int?
  right                                                                     Int?
  continent_id                                                              Int?
  action_process_step                                                       actionProcessStep[]
  agent                                                                     agent[]
  answer                                                                    answer[]
  bank                                                                      bank[]
  bank_has_country                                                          bankHasCountry[]
  banking_process                                                           bankingProcess[]
  billing_billing_country_idTocountry                                       billing[]                              @relation("billing_country_idTocountry")
  billing_billing_phone_country_idTocountry                                 billing[]                              @relation("billing_phone_country_idTocountry")
  business_activity                                                         businessActivity[]
  company_company_business_country_idTocountry                              company[]                              @relation("company_business_country_idTocountry")
  company_company_country_idTocountry                                       company[]                              @relation("company_country_idTocountry")
  company_company_operating_country_idTocountry                             company[]                              @relation("company_operating_country_idTocountry")
  company_has_operation_country                                             company_has_operation_country[]
  company_member_company_member_birth_country_idTocountry                   company_member[]                       @relation("company_member_birth_country_idTocountry")
  company_member_company_member_address_country_idTocountry                 company_member[]                       @relation("company_member_address_country_idTocountry")
  company_member_company_member_country_idTocountry                         company_member[]                       @relation("company_member_country_idTocountry")
  company_member_company_member_phone_country_idTocountry                   company_member[]                       @relation("company_member_phone_country_idTocountry")
  company_member_has_operation_country                                      company_member_has_operation_country[]
  company_member_reference                                                  company_member_reference[]
  continent                                                                 continent?                             @relation(fields: [continent_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_country_continent_1")
  country_has_company_suffix                                                country_has_company_suffix[]
  country_has_entity_type                                                   country_has_entity_type[]
  country_has_question                                                      country_has_question[]
  country_has_service                                                       country_has_service[]
  customer_customer_country_idTocountry                                     customer[]                             @relation("customer_country_idTocountry")
  customer_customer_company_country_idTocountry                             customer[]                             @relation("customer_company_country_idTocountry")
  customer_customer_phone_country_idTocountry                               customer[]                             @relation("customer_phone_country_idTocountry")
  declaration_tax                                                           declaration_tax[]
  fatca_fatca_holder_country_idTocountry                                    fatca[]                                @relation("fatca_holder_country_idTocountry")
  fatca_fatca_mailing_country_idTocountry                                   fatca[]                                @relation("fatca_mailing_country_idTocountry")
  fatca_fatca_resident_country_idTocountry                                  fatca[]                                @relation("fatca_resident_country_idTocountry")
  file_template_has_nationality                                             file_template_has_nationality[]
  grant_scheme                                                              grant_scheme[]
  grant_type_attribute                                                      grant_type_attribute[]
  history_company_history_company_country_idTocountry                       history_company[]                      @relation("history_company_country_idTocountry")
  history_company_history_company_operating_country_idTocountry             history_company[]                      @relation("history_company_operating_country_idTocountry")
  history_company_history_company_business_country_idTocountry              history_company[]                      @relation("history_company_business_country_idTocountry")
  history_company_member_history_company_member_country_idTocountry         history_company_member[]               @relation("history_company_member_country_idTocountry")
  history_company_member_history_company_member_birth_country_idTocountry   history_company_member[]               @relation("history_company_member_birth_country_idTocountry")
  history_company_member_history_company_member_phone_country_idTocountry   history_company_member[]               @relation("history_company_member_phone_country_idTocountry")
  history_company_member_history_company_member_address_country_idTocountry history_company_member[]               @relation("history_company_member_address_country_idTocountry")
  holiday                                                                   holiday[]
  order                                                                     order[]
  Renamedpackage                                                            Renamedpackage[]
  person_person_country_idTocountry                                         person[]                               @relation("person_country_idTocountry")
  person_person_phone_country_idTocountry                                   person[]                               @relation("person_phone_country_idTocountry")
  portal_post                                                               portal_post[]
  syslog                                                                    syslog[]
  task_task_country_idTocountry                                             task[]                                 @relation("task_country_idTocountry")
  task_task_incorporation_country_idTocountry                               task[]                                 @relation("task_incorporation_country_idTocountry")
  task_task_phone_country_idTocountry                                       task[]                                 @relation("task_phone_country_idTocountry")
  visa_vietnam_arrival                                                      visa_vietnam_arrival[]

  @@index([continent_id], map: "fk_country_continent_1_idx")
}

model country_has_company_suffix {
  country_id        Int
  company_suffix_id Int
  company_suffix    company_suffix @relation(fields: [company_suffix_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_country_has_company_suffix_company_suffix1")
  country           country        @relation(fields: [country_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_country_has_company_suffix_country1")

  @@id([country_id, company_suffix_id])
  @@index([company_suffix_id], map: "fk_country_has_company_suffix_country_idx")
}

model country_has_entity_type {
  id                                        Int                                         @unique(map: "id") @default(autoincrement())
  country_id                                Int
  entity_type_id                            Int
  is_active                                 Boolean?                                    @default(true)
  country                                   country                                     @relation(fields: [country_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_country_has_entity_type_country1")
  entity_type                               entity_type                                 @relation(fields: [entity_type_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_country_has_entity_type_entity_type1")
  country_has_entity_type_has_file_template country_has_entity_type_has_file_template[]

  @@id([country_id, entity_type_id])
  @@index([entity_type_id], map: "fk_country_has_entity_type_entity_type1_idx")
}

model country_has_entity_type_has_file_template {
  country_has_entity_type_id Int
  file_template_id           Int
  country_has_entity_type    country_has_entity_type @relation(fields: [country_has_entity_type_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_eft_country_has_entity_type_id")
  file_template              file_template           @relation(fields: [file_template_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_eft_file_template_id")

  @@id([file_template_id, country_has_entity_type_id])
  @@index([country_has_entity_type_id], map: "fk_eft_country_has_entity_type_id")
  @@index([file_template_id], map: "fk_eft_file_template_id")
}

model country_has_question {
  country_id  Int
  question_id Int
  country     country  @relation(fields: [country_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_taque_country_idx")
  question    question @relation(fields: [question_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_taque_question_idx")

  @@id([country_id, question_id])
  @@index([country_id], map: "fk_taque_country_idx")
  @@index([question_id], map: "fk_taque_question_idx")
}

model country_has_service {
  id             Int          @unique(map: "id") @default(autoincrement())
  country_id     Int
  service_id     Int
  entity_type_id Int?
  name           String?      @db.VarChar(255)
  description    String?      @db.Text
  data_config    Json?
  is_calendar    Boolean?     @default(false)
  is_deleted     Int?         @default(0)
  year_current   Int?         @default(0)
  entity_type    entity_type? @relation(fields: [entity_type_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_country_has_entity_type")
  country        country      @relation(fields: [country_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_country_has_service_country1")
  service        service      @relation(fields: [service_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_country_has_service_service1")

  @@id([id, country_id, service_id])
  @@index([entity_type_id], map: "fk_country_has_entity_type_idx")
  @@index([country_id], map: "fk_country_has_service_country1_idx")
  @@index([service_id], map: "fk_country_has_service_service1_idx")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model currency {
  id                   Int                    @id @default(autoincrement())
  name                 String?                @db.VarChar(45)
  code                 String?                @db.VarChar(45)
  symbol               String?                @db.VarChar(45)
  exchange_rate        Float?                 @db.Float
  is_deleted           Int                    @default(0) @db.TinyInt
  company_has_currency company_has_currency[]
  website              website[]
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model customer {
  id                                                Int                          @id @default(autoincrement())
  credit_amount                                     Float?                       @default(0)
  credit_description                                String?                      @db.Text
  country_id                                        Int?
  person_id                                         Int?
  campaign_ads_id                                   Int?
  client_id                                         Int?
  ga_channel_id                                     Int?
  contact_from_id                                   Int?
  entity_type_id                                    Int?
  company_suffix_id                                 Int?
  company_country_id                                Int?
  title_name_id                                     Int?
  website_id                                        Int                          @default(1)
  customer_type_id                                  Int?
  first_name                                        String?                      @db.VarChar(45)
  last_name                                         String?                      @db.VarChar(45)
  address                                           String?                      @db.Text
  gender_id                                         Int?
  email                                             String?                      @db.VarChar(320)
  cc_email                                          String?                      @db.Text
  email_status                                      String?                      @db.VarChar(20)
  phone                                             String?                      @db.VarChar(45)
  phone_number                                      String?                      @db.VarChar(255)
  phone_country_id                                  Int?
  skype                                             String?                      @db.VarChar(45)
  status                                            Int?                         @default(0)
  contact_from                                      Int?
  company_name                                      String?                      @db.Text
  description                                       String?                      @db.Text
  image                                             String?                      @db.VarChar(250)
  signature                                         String?                      @db.Text
  updated_time                                      DateTime?                    @default(now()) @db.DateTime(0)
  created_time                                      DateTime?                    @default(now()) @db.DateTime(0)
  other_type                                        String?                      @db.Text
  business_description                              String?                      @db.Text
  subject                                           String?                      @db.Text
  message                                           String?                      @db.Text
  entry_time                                        DateTime?                    @db.DateTime(0)
  birthday                                          DateTime?                    @db.DateTime(0)
  exit_time                                         DateTime?                    @db.DateTime(0)
  passport                                          String?                      @db.Text
  flight_number                                     String?                      @db.Text
  arrival_time                                      DateTime?                    @db.DateTime(0)
  airport_id                                        Int?
  visa_purpose_id                                   Int?
  visa_type_id                                      Int?
  order_id                                          Int?
  mailchimp_id                                      String?                      @db.Text
  survey_content                                    String?                      @db.Text
  xero_contact_id                                   String?                      @db.Text
  is_deleted                                        Int                          @default(0) @db.TinyInt
  logs                                              String?                      @db.Text
  customer_status_id                                Int?                         @default(0)
  city                                              String?                      @db.VarChar(200)
  state                                             String?                      @db.VarChar(200)
  postal_code                                       String?                      @db.VarChar(200)
  company_registration_no                           String?                      @db.VarChar(200)
  company_address                                   String?                      @db.VarChar(200)
  company_address_country_id                        Int?
  company_address_city                              String?                      @db.VarChar(200)
  company_address_state                             String?                      @db.VarChar(200)
  company_address_postal_code                       String?                      @db.VarChar(100)
  is_first_login                                    Boolean?                     @default(false)
  business_activity_industry_id                     Int?
  package_id                                        Int?
  cs_leader_id                                      Int?
  cs_member_id                                      Int?
  accountant_leader_id                              Int?
  accountant_member_id                              Int?
  legal_leader_id                                   Int?
  legal_member_id                                   Int?
  compliance_leader_id                              Int?
  compliance_member_id                              Int?
  internal_bookeeping_leader_id                     Int?
  internal_bookeeping_member_id                     Int?
  tester_leader_id                                  Int?
  time_unassigned_tester                            BigInt?
  middle_name                                       String?                      @db.VarChar(45)
  billing                                           billing[]
  contact_from_history                              contact_from_history[]
  customer_status                                   customer_status?             @relation(fields: [customer_status_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "FK_cutomer_status")
  user_customer_accountant_leader_idTouser          user?                        @relation("customer_accountant_leader_idTouser", fields: [accountant_leader_id], references: [id], map: "customer_accountant_leader_id_foreign_idx")
  user_customer_accountant_member_idTouser          user?                        @relation("customer_accountant_member_idTouser", fields: [accountant_member_id], references: [id], map: "customer_accountant_member_id_foreign_idx")
  user_customer_compliance_leader_idTouser          user?                        @relation("customer_compliance_leader_idTouser", fields: [compliance_leader_id], references: [id], map: "customer_compliance_leader_id_foreign_idx")
  user_customer_compliance_member_idTouser          user?                        @relation("customer_compliance_member_idTouser", fields: [compliance_member_id], references: [id], map: "customer_compliance_member_id_foreign_idx")
  user_customer_cs_leader_idTouser                  user?                        @relation("customer_cs_leader_idTouser", fields: [cs_leader_id], references: [id], map: "customer_cs_leader_id_foreign_idx")
  user_customer_cs_member_idTouser                  user?                        @relation("customer_cs_member_idTouser", fields: [cs_member_id], references: [id], map: "customer_cs_member_id_foreign_idx")
  country_customer_country_idTocountry              country?                     @relation("customer_country_idTocountry", fields: [country_id], references: [id], map: "customer_ibfk_10")
  person                                            person?                      @relation(fields: [person_id], references: [id], map: "customer_ibfk_11")
  campaign                                          campaign?                    @relation(fields: [campaign_ads_id], references: [id], map: "customer_ibfk_12")
  ga_channel                                        ga_channel?                  @relation(fields: [ga_channel_id], references: [id], map: "customer_ibfk_13")
  contact_froms                                     contact_from?                @relation(fields: [contact_from_id], references: [id], map: "customer_ibfk_14")
  entity_type                                       entity_type?                 @relation(fields: [entity_type_id], references: [id], map: "customer_ibfk_15")
  company_suffix                                    company_suffix?              @relation(fields: [company_suffix_id], references: [id], map: "customer_ibfk_16")
  country_customer_company_country_idTocountry      country?                     @relation("customer_company_country_idTocountry", fields: [company_country_id], references: [id], map: "customer_ibfk_17")
  title_name                                        title_name?                  @relation(fields: [title_name_id], references: [id], map: "customer_ibfk_18")
  user_customer_internal_bookeeping_leader_idTouser user?                        @relation("customer_internal_bookeeping_leader_idTouser", fields: [internal_bookeeping_leader_id], references: [id], map: "customer_internal_bookeeping_leader_id_foreign_idx")
  user_customer_internal_bookeeping_member_idTouser user?                        @relation("customer_internal_bookeeping_member_idTouser", fields: [internal_bookeeping_member_id], references: [id], map: "customer_internal_bookeeping_member_id_foreign_idx")
  user_customer_legal_leader_idTouser               user?                        @relation("customer_legal_leader_idTouser", fields: [legal_leader_id], references: [id], map: "customer_legal_leader_id_foreign_idx")
  user_customer_legal_member_idTouser               user?                        @relation("customer_legal_member_idTouser", fields: [legal_member_id], references: [id], map: "customer_legal_member_id_foreign_idx")
  country_customer_phone_country_idTocountry        country?                     @relation("customer_phone_country_idTocountry", fields: [phone_country_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_cus_phone_country_id_cou_id_donu")
  website                                           website                      @relation(fields: [website_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_cus_website_id_web_id_c683")
  airport                                           airport?                     @relation(fields: [airport_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_customer_airport1")
  business_activity_industry                        businessActivityIndustry?    @relation(fields: [business_activity_industry_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_customer_business_activity_industry1")
  customerType                                      customer_type?               @relation(fields: [customer_type_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_customer_customer_type1")
  gender                                            gender?                      @relation(fields: [gender_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_customer_gender")
  order_customer_order_idToorder                    order?                       @relation("customer_order_idToorder", fields: [order_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_customer_order1")
  Renamedpackage                                    Renamedpackage?              @relation(fields: [package_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_customer_package")
  user_customer_tester_leader_idTouser              user?                        @relation("customer_tester_leader_idTouser", fields: [tester_leader_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_customer_tester_leader_id")
  visa_purpose                                      visa_purpose?                @relation(fields: [visa_purpose_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_customer_visa_purpose1")
  visa_type                                         visa_type?                   @relation(fields: [visa_type_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_customer_visatype1")
  customer_has_bank                                 customer_has_bank[]
  customer_has_survey_choice                        customer_has_survey_choice[]
  fatca                                             fatca[]
  order_order_customer_idTocustomer                 order[]                      @relation("order_customer_idTocustomer")
  task                                              task[]
  user_user_customer_idTocustomer                   user[]                       @relation("user_customer_idTocustomer")
  voucher                                           voucher[]

  @@index([company_address_country_id], map: "FK_customer_company_country_id_idx")
  @@index([customer_status_id], map: "FK_cutomer_status")
  @@index([company_country_id], map: "company_country_id")
  @@index([accountant_leader_id], map: "customer_accountant_leader_id_foreign_idx")
  @@index([accountant_member_id], map: "customer_accountant_member_id_foreign_idx")
  @@index([compliance_leader_id], map: "customer_compliance_leader_id_foreign_idx")
  @@index([compliance_member_id], map: "customer_compliance_member_id_foreign_idx")
  @@index([cs_leader_id], map: "customer_cs_leader_id_foreign_idx")
  @@index([cs_member_id], map: "customer_cs_member_id_foreign_idx")
  @@index([internal_bookeeping_leader_id], map: "customer_internal_bookeeping_leader_id_foreign_idx")
  @@index([internal_bookeeping_member_id], map: "customer_internal_bookeeping_member_id_foreign_idx")
  @@index([legal_leader_id], map: "customer_legal_leader_id_foreign_idx")
  @@index([legal_member_id], map: "customer_legal_member_id_foreign_idx")
  @@index([airport_id], map: "fk_customer_airport1_idx")
  @@index([business_activity_industry_id], map: "fk_customer_business_activity_industry1_idx")
  @@index([campaign_ads_id], map: "fk_customer_campaign_ads1_idx")
  @@index([contact_from_id], map: "fk_customer_contact_from1_idx")
  @@index([country_id], map: "fk_customer_country1_idx")
  @@index([customer_type_id], map: "fk_customer_customer_type1_idx")
  @@index([entity_type_id], map: "fk_customer_entity_type_idx")
  @@index([ga_channel_id], map: "fk_customer_ga_channel1")
  @@index([gender_id], map: "fk_customer_gender_idx")
  @@index([phone_country_id], map: "fk_customer_has_phone_country_idx")
  @@index([order_id], map: "fk_customer_order1_idx")
  @@index([package_id], map: "fk_customer_package_idx")
  @@index([person_id], map: "fk_customer_person1_idx")
  @@index([company_suffix_id], map: "fk_customer_suffix_idx")
  @@index([tester_leader_id], map: "fk_customer_tester_leader_id_idx")
  @@index([title_name_id], map: "fk_customer_title_name_idx")
  @@index([visa_purpose_id], map: "fk_customer_visa_purpose1_idx")
  @@index([visa_type_id], map: "fk_customer_visatype1_idx")
  @@index([website_id], map: "fk_customer_website_idx")
}

model customer_has_bank {
  customer_id Int
  bank_id     Int
  bank        bank     @relation(fields: [bank_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "customer_has_bank_fk_bank")
  customer    customer @relation(fields: [customer_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "customer_has_bank_fk_customer")

  @@id([customer_id, bank_id])
  @@index([bank_id], map: "customer_has_bank_fk_bank")
}

model customer_has_survey_choice {
  id               Int           @id @default(autoincrement())
  customer_id      Int
  survey_choice_id Int
  survey_content   String?       @db.VarChar(255)
  is_deleted       Boolean?      @default(false)
  created_time     DateTime      @default(now()) @db.DateTime(0)
  updated_time     DateTime      @default(now()) @db.DateTime(0)
  customer         customer      @relation(fields: [customer_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_cus_customer_id_cus_id_5h8l")
  survey_choice    survey_choice @relation(fields: [survey_choice_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_cus_survey_choice_id_sur_id_e5hs")

  @@index([customer_id], map: "fk_cus_customer_id_cus_id_5h8l")
  @@index([survey_choice_id], map: "fk_cus_survey_choice_id_sur_id_e5hs")
}

model customer_status {
  id           Int        @id
  name         String     @db.VarChar(45)
  description  String?    @db.VarChar(100)
  is_deleted   Boolean?   @default(false)
  created_time DateTime   @default(now()) @db.DateTime(0)
  updated_time DateTime   @default(now()) @db.DateTime(0)
  customer     customer[]
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model customer_type {
  id           Int
  name         String?    @db.VarChar(45)
  description  String?    @db.VarChar(45)
  created_time DateTime?  @default(now()) @db.DateTime(0)
  is_deleted   Int        @default(0) @db.TinyInt
  customers    customer[]

  @@id([id])
}

model declaration_tax {
  id                   Int      @id @default(autoincrement())
  country_id           Int
  fatca_id             Int
  tax_reference_type   String?  @db.VarChar(255)
  tax_reference_number String?  @db.VarChar(255)
  is_deleted           Boolean? @default(false)
  country              country  @relation(fields: [country_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_dec_country_id_cou_id_37d2")
  fatca                fatca    @relation(fields: [fatca_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_dec_fatca_id_fat_id_c5mf")

  @@index([country_id], map: "fk_dec_country_id_cou_id_37d2")
  @@index([fatca_id], map: "fk_dec_fatca_id_fat_id_c5mf")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model department {
  id                          Int                           @id @default(autoincrement())
  name                        String                        @default("") @db.VarChar(45)
  config                      Json?
  is_deleted                  Boolean?                      @default(false)
  created_time                DateTime?                     @default(now()) @db.DateTime(0)
  updated_time                DateTime?                     @default(now()) @db.DateTime(0)
  service_type_has_department service_type_has_department[]
}

model email {
  id                          Int                           @id @default(autoincrement())
  email_template_id           Int?
  subject                     String?                       @db.VarChar(255)
  agent_id                    Int?
  process_id                  Int?
  order                       Int?
  time_to_send                BigInt?
  description                 String?                       @db.Text
  created_time                DateTime?                     @default(now()) @db.DateTime(0)
  updated_time                DateTime?                     @default(now()) @db.DateTime(0)
  is_completed                Int?                          @default(0)
  is_error                    Int?                          @default(0)
  is_deleted                  Int?                          @default(0)
  email_to                    String?                       @db.VarChar(255)
  email_from                  String?                       @db.VarChar(200)
  email_cc                    String?                       @db.VarChar(255)
  is_running                  Boolean?                      @default(false)
  attachments                 String?                       @db.LongText
  company_member_id           Int?
  company_id                  Int?
  agent                       agent?                        @relation(fields: [agent_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_ema_agent_id_age_id_hpr1")
  company_member              company_member?               @relation(fields: [company_member_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_ema_company_member_id_com_id_erjh")
  email_template              email_template?               @relation(fields: [email_template_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_ema_email_template_id_ema_id_5exl")
  process                     process?                      @relation(fields: [process_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_ema_process_id_pro_id_gmvr")
  company                     company?                      @relation(fields: [company_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_email_company_id_1")
  email_template_has_receiver email_template_has_receiver[]

  @@index([agent_id], map: "fk_ema_agent_id_age_id_hpr1")
  @@index([company_member_id], map: "fk_ema_company_member_id_com_id_erjh")
  @@index([email_template_id], map: "fk_ema_email_template_id_ema_id_5exl")
  @@index([process_id], map: "fk_ema_process_id_pro_id_gmvr")
  @@index([company_id], map: "fk_email_company_id_1_idx")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model email_template {
  id                          Int                           @id @default(autoincrement())
  name                        String?                       @db.VarChar(256)
  description                 String?                       @db.VarChar(255)
  preview_text                String?                       @db.VarChar(255)
  path                        String?                       @db.VarChar(200)
  pre_time                    Int?
  next_email_template_id      Int?
  process_step_id             Int?
  is_email_remind             Int?                          @default(0)
  max_time_send               Int?
  created_time                DateTime?                     @default(now()) @db.DateTime(0)
  updated_time                DateTime?                     @default(now()) @db.DateTime(0)
  is_deleted                  Boolean?                      @default(false)
  email_type_id               Int?
  data_view_tables            Json?
  email                       email[]
  email_type                  email_type?                   @relation(fields: [email_type_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_email_type_id")
  email_template              email_template?               @relation("email_templateToemail_template", fields: [next_email_template_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_next_email_template_id")
  other_email_template        email_template[]              @relation("email_templateToemail_template")
  process_step                process_step?                 @relation(fields: [process_step_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_process_step_id")
  email_template_has_receiver email_template_has_receiver[]
  email_trigger_has_process   email_trigger_has_process[]

  @@index([email_type_id], map: "fk_email_type_id_idx")
  @@index([next_email_template_id], map: "fk_next_email_template_id")
  @@index([process_step_id], map: "fk_process_step_id")
}

model email_template_has_receiver {
  id                Int            @id @default(autoincrement())
  email_template_id Int
  email             String?        @db.VarChar(100)
  user_id           Int?
  role_id           Int?
  group_id          Int?
  is_main_receiver  Boolean?       @default(false)
  is_cc_receiver    Boolean?       @default(false)
  is_bcc_receiver   Boolean?       @default(false)
  is_excluded       Boolean?       @default(false)
  is_deleted        Boolean?       @default(false)
  created_time      DateTime?      @default(now()) @db.DateTime(0)
  updated_time      DateTime?      @default(now()) @db.DateTime(0)
  email_template    email_template @relation(fields: [email_template_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_ema_email_template_id_ema_id_dsqg")
  team_group        team_group?    @relation(fields: [group_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_ema_group_id_tea_id_kb0w")
  emails            email          @relation(fields: [email_template_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_email_template_id")
  role              role?          @relation(fields: [role_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_group_id_1")
  user              user?          @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_user_id_2")

  @@index([email_template_id], map: "fk_email_template_id_idx")
  @@index([group_id], map: "fk_group_id_idx")
  @@index([role_id], map: "fk_role_id_idx")
  @@index([user_id], map: "fk_user_id_idx")
}

model email_trigger {
  id                        Int                         @id @default(autoincrement())
  name                      String?                     @db.VarChar(255)
  type                      Int?
  service_type_ids          Json?
  process_step_id           Int?
  is_remind_agent           Boolean                     @default(false)
  created_time              DateTime?                   @default(now()) @db.DateTime(0)
  updated_time              DateTime?                   @default(now()) @db.DateTime(0)
  is_deleted                Boolean                     @default(false)
  process_step              process_step?               @relation(fields: [process_step_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_ema_process_step_id_pro_id_c9l8")
  email_trigger_has_process email_trigger_has_process[]

  @@index([process_step_id], map: "fk_ema_process_step_id_pro_id_c9l8")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model email_trigger_has_process {
  email_trigger_id  Int
  process_id        Int
  email_template_id Int
  is_remind         Int?           @default(0)
  created_time      DateTime?      @default(now()) @db.DateTime(0)
  updated_time      DateTime?      @default(now()) @db.DateTime(0)
  email_template    email_template @relation(fields: [email_template_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_ema_email_template_id_ema_id_jsfc")
  email_trigger     email_trigger  @relation(fields: [email_trigger_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_ema_email_trigger_id_ema_id_kci7")
  process           process        @relation(fields: [process_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_ema_process_id_pro_id_5hgb")

  @@id([email_trigger_id, process_id, email_template_id])
  @@index([email_template_id], map: "fk_ema_email_template_id_ema_id_jsfc")
  @@index([process_id], map: "fk_ema_process_id_pro_id_5hgb")
}

model email_type {
  id             Int              @id @default(autoincrement())
  name           String?          @db.VarChar(45)
  is_deleted     Boolean?         @default(false)
  created_time   DateTime?        @default(now()) @db.DateTime(0)
  updated_time   DateTime?        @default(now()) @db.DateTime(0)
  email_template email_template[]
}

model entity_type {
  id                             Int                              @id @default(autoincrement())
  name                           String?                          @db.Text
  guid                           String?                          @db.Text
  country                        String?                          @db.Text
  is_deleted                     Int?                             @default(0) @db.TinyInt
  company                        company[]
  country_has_entity_type        country_has_entity_type[]
  country_has_service            country_has_service[]
  customer                       customer[]
  entity_type_has_company_suffix entity_type_has_company_suffix[]
  history_company                history_company[]
  Renamedpackage                 Renamedpackage[]
  task                           task[]
}

model entity_type_has_company_suffix {
  entity_type_id    Int
  company_suffix_id Int
  company_suffix    company_suffix @relation(fields: [company_suffix_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_entity_type_has_company_suffix_company_suffix1")
  entity_type       entity_type    @relation(fields: [entity_type_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_entity_type_has_company_suffix_entity_type1")

  @@id([entity_type_id, company_suffix_id])
  @@index([company_suffix_id], map: "fk_entity_type_has_company_suffix_company_suffix1_idx")
}

model fatca {
  id                                         Int               @id @default(autoincrement())
  company_member_id                          Int?
  customer_id                                Int?
  task_id                                    Int
  holder_name                                String            @db.VarChar(255)
  holder_birthday                            DateTime          @db.DateTime(0)
  holder_country_id                          Int?
  resident_address                           String?           @db.VarChar(255)
  resident_country_id                        Int?
  resident_city                              String?           @db.VarChar(255)
  resident_state                             String?           @db.VarChar(255)
  resident_postal_code                       String?           @db.VarChar(255)
  mailing_address                            String?           @db.VarChar(255)
  mailing_country_id                         Int?
  mailing_city                               String?           @db.VarChar(255)
  mailing_state                              String?           @db.VarChar(255)
  mailing_postal_code                        String?           @db.VarChar(255)
  option_declaration_US_person               Int?
  taxpayer_id_number                         String?           @db.VarChar(255)
  is_deleted                                 Boolean?          @default(false)
  declaration_tax                            declaration_tax[]
  company_member                             company_member?   @relation(fields: [company_member_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_fat_company_member_id_com_id_dfbt")
  customer                                   customer?         @relation(fields: [customer_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_fat_customer_id_cus_id_1x24")
  country_fatca_holder_country_idTocountry   country?          @relation("fatca_holder_country_idTocountry", fields: [holder_country_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_fat_holder_country_id_cou_id_350l")
  country_fatca_mailing_country_idTocountry  country?          @relation("fatca_mailing_country_idTocountry", fields: [mailing_country_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_fat_mailing_country_id_cou_id_bmuc")
  country_fatca_resident_country_idTocountry country?          @relation("fatca_resident_country_idTocountry", fields: [resident_country_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_fat_resident_country_id_cou_id_l92h")
  task                                       task              @relation(fields: [task_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_fat_task_id_tas_id_7a31")

  @@index([company_member_id], map: "fk_fat_company_member_id_com_id_dfbt")
  @@index([customer_id], map: "fk_fat_customer_id_cus_id_1x24")
  @@index([holder_country_id], map: "fk_fat_holder_country_id_cou_id_350l")
  @@index([mailing_country_id], map: "fk_fat_mailing_country_id_cou_id_bmuc")
  @@index([resident_country_id], map: "fk_fat_resident_country_id_cou_id_l92h")
  @@index([task_id], map: "fk_fat_task_id_tas_id_7a31")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model fee {
  id           Int       @id @default(autoincrement())
  service_id   Int?
  fee_type_id  Int
  value        Float?    @db.Float
  created_time DateTime? @default(now()) @db.DateTime(0)
  updated_time DateTime? @default(now()) @db.DateTime(0)
  is_deleted   Boolean?  @default(false)
  fee_type     fee_type  @relation(fields: [fee_type_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_fee_fee_category1")
  service      service?  @relation(fields: [service_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_fee_service1")

  @@index([fee_type_id], map: "fk_fee_fee_category1")
  @@index([service_id], map: "fk_fee_service1")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model fee_type {
  id          Int     @id @default(autoincrement())
  value       String? @db.VarChar(45)
  name        String? @db.VarChar(45)
  cycle_begin Int?    @default(0)
  cycle_time  Int?
  description String? @db.Text
  is_deleted  Int     @default(0) @db.TinyInt
  fee         fee[]
}

model field {
  id              Int       @id @default(autoincrement())
  name            String    @db.VarChar(100)
  datatype        String    @db.VarChar(100)
  is_response     Boolean?  @default(false)
  is_array_object Boolean?  @default(false)
  table_name      String?   @db.VarChar(45)
  comment         String?   @db.Text
  created_time    DateTime? @default(now()) @db.DateTime(0)
  updated_time    DateTime? @default(now()) @db.DateTime(0)
  is_deleted      Boolean   @default(false)
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model file {
  id                                                              Int              @id @default(autoincrement())
  name                                                            String           @db.VarChar(255)
  path                                                            String?          @db.VarChar(255)
  mime_type                                                       String?          @db.VarChar(255)
  s3_path                                                         String?          @db.VarChar(255)
  is_deleted                                                      Boolean          @default(false)
  created_time                                                    DateTime         @default(now()) @db.DateTime(0)
  user_id                                                         Int?
  company_id                                                      Int?
  message_id                                                      Int?
  order_id                                                        Int?
  file_type_id                                                    Int?
  task_id                                                         Int?
  file_template_id                                                Int?
  filled_by_company_member_id                                     Int?
  is_filled                                                       Boolean?
  full_name                                                       String?          @db.VarChar(255)
  ip_address                                                      String?          @db.VarChar(255)
  note_id                                                         Int?
  bank_id                                                         Int?
  ranking_partner_id                                              Int?
  change_request_id                                               Int?
  company_member_id                                               Int?
  api_example_id                                                  Int?
  updated_time                                                    DateTime?        @default(now()) @db.DateTime(0)
  question_group_id                                               Int?
  to_company_member_id                                            Int?
  type_id                                                         Int?
  filled_by_user_id                                               Int?
  status                                                          Int?             @default(1)
  company_event_id                                                Int?
  company_share                                                   company_share[]
  change_request                                                  changeRequest?   @relation(fields: [change_request_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_change_request_file_id")
  company                                                         company?         @relation(fields: [company_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_fil_company_id_com_id_e3qa")
  company_member_file_company_member_idTocompany_member           company_member?  @relation("file_company_member_idTocompany_member", fields: [company_member_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_fil_company_member_id_com_id_jiat")
  file_template                                                   file_template?   @relation(fields: [file_template_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_fil_file_template_id_fil_id_ev0d")
  file_type                                                       file_type?       @relation(fields: [file_type_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_fil_file_type_id_fil_id_5psy")
  company_member_file_filled_by_company_member_idTocompany_member company_member?  @relation("file_filled_by_company_member_idTocompany_member", fields: [filled_by_company_member_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_fil_filled_by_company_member_id_com_id_1lvj")
  message                                                         message?         @relation(fields: [message_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_fil_message_id_mes_id_2yvf")
  note                                                            note?            @relation(fields: [note_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_fil_note_id_not_id_1rdz")
  order                                                           order?           @relation(fields: [order_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_fil_order_id_ord_id_4pg2")
  question_group                                                  question_group?  @relation(fields: [question_group_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_fil_question_group_id_que_id_1rji")
  ranking_partner                                                 ranking_partner? @relation(fields: [ranking_partner_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_fil_ranking_partner_id_ran_id_fly1")
  task                                                            task?            @relation(fields: [task_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_fil_task_id_tas_id_hjct")
  user                                                            user?            @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_fil_user_id_use_id_6ag1")
  api_example                                                     apiExample?      @relation(fields: [api_example_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_file_api_example")
  company_event                                                   companyEvent?    @relation(fields: [company_event_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_file_company_event_id")
  history_file                                                    history_file[]

  @@index([change_request_id], map: "fk_change_request_file_id_idx")
  @@index([company_id], map: "fk_fil_company_id_com_id_e3qa")
  @@index([company_member_id], map: "fk_fil_company_member_id_com_id_jiat")
  @@index([file_template_id], map: "fk_fil_file_template_id_fil_id_ev0d")
  @@index([file_type_id], map: "fk_fil_file_type_id_fil_id_5psy")
  @@index([filled_by_company_member_id], map: "fk_fil_filled_by_company_member_id_com_id_1lvj")
  @@index([message_id], map: "fk_fil_message_id_mes_id_2yvf")
  @@index([note_id], map: "fk_fil_note_id_not_id_1rdz")
  @@index([order_id], map: "fk_fil_order_id_ord_id_4pg2")
  @@index([question_group_id], map: "fk_fil_question_group_id_que_id_1rji")
  @@index([ranking_partner_id], map: "fk_fil_ranking_partner_id_ran_id_fly1")
  @@index([task_id], map: "fk_fil_task_id_tas_id_hjct")
  @@index([user_id], map: "fk_fil_user_id_use_id_6ag1")
  @@index([api_example_id], map: "fk_file_api_example")
  @@index([company_event_id], map: "fk_file_company_event_id_idx")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model file_template {
  id                                                               Int                                         @id @default(autoincrement())
  name                                                             String?                                     @db.VarChar(255)
  description                                                      String?                                     @db.Text
  path_template                                                    String?                                     @db.VarChar(255)
  is_not_signed                                                    Boolean?                                    @default(false)
  is_esign                                                         Boolean?                                    @default(false)
  is_signed_for_FATCA                                              Boolean?                                    @default(false)
  parent_id                                                        Int?
  file_template_type_id                                            Int?
  file_type_id                                                     Int?
  is_deleted                                                       Boolean?                                    @default(false)
  data_config                                                      Json?
  collect_same_id                                                  Int?
  is_inactive                                                      Int?                                        @db.TinyInt
  is_approved_date_appointment                                     Int?                                        @default(0)
  bank_has_file_template                                           bankHasFileTemplate[]
  country_has_entity_type_has_file_template                        country_has_entity_type_has_file_template[]
  file                                                             file[]
  file_template_file_template_collect_same_idTofile_template       file_template?                              @relation("file_template_collect_same_idTofile_template", fields: [collect_same_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "FK_collect_same_id")
  other_file_template_file_template_collect_same_idTofile_template file_template[]                             @relation("file_template_collect_same_idTofile_template")
  file_template_file_template_parent_idTofile_template             file_template?                              @relation("file_template_parent_idTofile_template", fields: [parent_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "FK_file_template_parent_id")
  other_file_template_file_template_parent_idTofile_template       file_template[]                             @relation("file_template_parent_idTofile_template")
  file_template_has_company_member_type                            file_template_has_company_member_type[]
  file_template_has_nationality                                    file_template_has_nationality[]
  file_template_has_ranking_partner_type                           file_template_has_ranking_partner_type[]
  process_log                                                      process_log[]
  process_step_has_file_template                                   process_step_has_file_template[]
  service_change_officer_has_file_template                         service_change_officer_has_file_template[]
  service_has_file_template                                        service_has_file_template[]
  token                                                            token[]

  @@index([parent_id], map: "FK_file_template_parent_id_idx")
  @@index([collect_same_id], map: "fk_collect_same_id_INDEX")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model file_template_has_company_member_type {
  id                         Int                 @id @default(autoincrement())
  file_template_id           Int
  company_member_type_id     Int
  type_member_id             Int?
  is_signed_by_all           Boolean?            @default(false)
  is_signed_by_appointed     Boolean?            @default(false)
  is_signed_by_individual    Boolean?            @default(false)
  is_signed_transfer         Boolean?            @default(false)
  is_signed_by_oldest_member Boolean?            @default(false)
  generated_for              Int?
  is_deleted                 Boolean?            @default(false)
  company_member_type        company_member_type @relation(fields: [company_member_type_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_fcm_company_member_type_id")
  file_template              file_template       @relation(fields: [file_template_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_fcm_file_template_id")
  type_member                type_member?        @relation(fields: [type_member_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_fcm_type_member_id")

  @@index([company_member_type_id], map: "fk_fcm_company_member_type_id")
  @@index([file_template_id], map: "fk_fcm_file_template_id")
  @@index([type_member_id], map: "fk_fcm_type_member_id_idx")
}

model file_template_has_nationality {
  id                       Int           @id @default(autoincrement())
  file_template_id         Int
  country_id               Int
  is_fill_more_information Boolean?      @default(false)
  is_deleted               Boolean?      @default(false)
  created_time             DateTime?     @default(now()) @db.DateTime(0)
  updated_time             DateTime?     @default(now()) @db.DateTime(0)
  country                  country       @relation(fields: [country_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_country_nationality_id")
  file_template            file_template @relation(fields: [file_template_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_file_template_nationality_id")

  @@index([country_id], map: "fk_country_id_idx")
  @@index([file_template_id], map: "fk_file_template_id_idx")
}

model file_template_has_ranking_partner_type {
  file_template_id        Int
  ranking_partner_type_id Int
  file_template           file_template        @relation(fields: [file_template_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_fil_file_template_id_fil_id_4hgv")
  ranking_partner_type    ranking_partner_type @relation(fields: [ranking_partner_type_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_fil_ranking_partner_type_id_ran_id_88fz")

  @@id([ranking_partner_type_id, file_template_id])
  @@index([file_template_id], map: "fk_fil_file_template_id_fil_id_4hgv")
}

model file_template_type {
  id           Int       @id @default(autoincrement())
  name         String    @db.VarChar(45)
  is_deleted   Boolean   @default(false)
  created_time DateTime? @default(now()) @db.DateTime(0)
  updated_time DateTime? @default(now()) @db.DateTime(0)
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model file_type {
  id                 Int         @id @default(autoincrement())
  name               String?     @db.VarChar(120)
  file_type_group_id Int?
  parent_id          Int?
  file_type_id       Int?
  is_deleted         Int         @default(0) @db.TinyInt
  created_time       DateTime?   @default(now()) @db.DateTime(0)
  updated_time       DateTime?   @default(now()) @db.DateTime(0)
  file               file[]
  file_type          file_type?  @relation("file_typeTofile_type", fields: [parent_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "file_type_parent_id")
  other_file_type    file_type[] @relation("file_typeTofile_type")

  @@index([parent_id])
}

model ga_channel {
  id           Int        @id @default(autoincrement())
  name         String?    @db.VarChar(45)
  created_time DateTime?  @default(now()) @db.DateTime(0)
  updated_time DateTime?  @default(now()) @db.DateTime(0)
  is_deleted   Int?       @default(0) @db.TinyInt
  customer     customer[]
}

model gender {
  id                     Int                      @id
  name                   String?                  @db.VarChar(45)
  prefix                 String?                  @db.VarChar(45)
  is_deleted             Int?                     @default(0) @db.TinyInt
  company_member         company_member[]
  customer               customer[]
  history_company_member history_company_member[]
  person                 person[]
}

model grant_scheme {
  id                                    Int                                     @id @default(autoincrement())
  name                                  String                                  @db.VarChar(100)
  description                           String?                                 @db.Text
  country_id                            Int?
  updated_time                          DateTime?                               @default(now()) @db.DateTime(0)
  created_time                          DateTime?                               @default(now()) @db.DateTime(0)
  is_deleted                            Boolean?                                @default(false)
  key_facts                             String?                                 @db.Text
  introduction                          String?                                 @db.Text
  benefits                              String?                                 @db.Text
  eligibility                           String?                                 @db.Text
  how_to_apply                          String?                                 @db.Text
  country                               country?                                @relation(fields: [country_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_grant_scheme_country")
  grant_scheme_has_grant_type_attribute grant_scheme_has_grant_type_attribute[]

  @@index([country_id], map: "fk_grant_scheme_country_idx")
}

model grant_scheme_has_grant_type_attribute {
  id                                                                                                     Int                   @id @default(autoincrement())
  grant_scheme_id                                                                                        Int
  needs_based_id                                                                                         Int?
  industry_id                                                                                            Int?
  business_stage_id                                                                                      Int?
  years_operation_id                                                                                     Int?
  business_size_id                                                                                       Int?
  local_shareholding_id                                                                                  Int?
  number_employees_id                                                                                    Int?
  type_id                                                                                                Int?
  agency_id                                                                                              Int?
  updated_time                                                                                           DateTime?             @default(now()) @db.DateTime(0)
  created_time                                                                                           DateTime?             @default(now()) @db.DateTime(0)
  is_deleted                                                                                             Boolean?              @default(false)
  grant_type_attribute_grant_scheme_has_grant_type_attribute_agency_idTogrant_type_attribute             grant_type_attribute? @relation("grant_scheme_has_grant_type_attribute_agency_idTogrant_type_attribute", fields: [agency_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_grant_scheme_has_grant_type_attribute_agency")
  grant_type_attribute_grant_scheme_has_grant_type_attribute_business_size_idTogrant_type_attribute      grant_type_attribute? @relation("grant_scheme_has_grant_type_attribute_business_size_idTogrant_type_attribute", fields: [business_size_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_grant_scheme_has_grant_type_attribute_business_size")
  grant_type_attribute_grant_scheme_has_grant_type_attribute_business_stage_idTogrant_type_attribute     grant_type_attribute? @relation("grant_scheme_has_grant_type_attribute_business_stage_idTogrant_type_attribute", fields: [business_stage_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_grant_scheme_has_grant_type_attribute_business_stage")
  grant_scheme                                                                                           grant_scheme          @relation(fields: [grant_scheme_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_grant_scheme_has_grant_type_attribute_grant_scheme")
  grant_type_attribute_grant_scheme_has_grant_type_attribute_industry_idTogrant_type_attribute           grant_type_attribute? @relation("grant_scheme_has_grant_type_attribute_industry_idTogrant_type_attribute", fields: [industry_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_grant_scheme_has_grant_type_attribute_industry")
  grant_type_attribute_grant_scheme_has_grant_type_attribute_local_shareholding_idTogrant_type_attribute grant_type_attribute? @relation("grant_scheme_has_grant_type_attribute_local_shareholding_idTogrant_type_attribute", fields: [local_shareholding_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_grant_scheme_has_grant_type_attribute_local_shareholding")
  grant_type_attribute_grant_scheme_has_grant_type_attribute_needs_based_idTogrant_type_attribute        grant_type_attribute? @relation("grant_scheme_has_grant_type_attribute_needs_based_idTogrant_type_attribute", fields: [needs_based_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_grant_scheme_has_grant_type_attribute_needs_base")
  grant_type_attribute_grant_scheme_has_grant_type_attribute_number_employees_idTogrant_type_attribute   grant_type_attribute? @relation("grant_scheme_has_grant_type_attribute_number_employees_idTogrant_type_attribute", fields: [number_employees_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_grant_scheme_has_grant_type_attribute_number_employees")
  grant_type_attribute_grant_scheme_has_grant_type_attribute_type_idTogrant_type_attribute               grant_type_attribute? @relation("grant_scheme_has_grant_type_attribute_type_idTogrant_type_attribute", fields: [type_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_grant_scheme_has_grant_type_attribute_type")
  grant_type_attribute_grant_scheme_has_grant_type_attribute_years_operation_idTogrant_type_attribute    grant_type_attribute? @relation("grant_scheme_has_grant_type_attribute_years_operation_idTogrant_type_attribute", fields: [years_operation_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_grant_scheme_has_grant_type_attribute_years_operation")

  @@index([agency_id], map: "fk_grant_scheme_has_grant_type_attribute_agency_idx")
  @@index([business_size_id], map: "fk_grant_scheme_has_grant_type_attribute_business_size_idx")
  @@index([business_stage_id], map: "fk_grant_scheme_has_grant_type_attribute_business_stage_idx")
  @@index([grant_scheme_id], map: "fk_grant_scheme_has_grant_type_attribute_grant_scheme_idx")
  @@index([industry_id], map: "fk_grant_scheme_has_grant_type_attribute_industry_idx")
  @@index([local_shareholding_id], map: "fk_grant_scheme_has_grant_type_attribute_local_shareholding_idx")
  @@index([needs_based_id], map: "fk_grant_scheme_has_grant_type_attribute_needs_base_idx")
  @@index([number_employees_id], map: "fk_grant_scheme_has_grant_type_attribute_number_employees_idx")
  @@index([type_id], map: "fk_grant_scheme_has_grant_type_attribute_type_idx")
  @@index([years_operation_id], map: "fk_grant_scheme_has_grant_type_attribute_years_operation_idx")
}

model grant_type {
  id                   Int                    @id @default(autoincrement())
  name                 String                 @db.VarChar(100)
  description          String?                @db.Text
  updated_time         DateTime?              @default(now()) @db.DateTime(0)
  created_time         DateTime?              @default(now()) @db.DateTime(0)
  is_deleted           Boolean?               @default(false)
  grant_type_attribute grant_type_attribute[]
}

model grant_type_attribute {
  id                                                                                                                      Int                                     @id @default(autoincrement())
  grant_type_id                                                                                                           Int?
  name                                                                                                                    String                                  @db.VarChar(100)
  description                                                                                                             String?                                 @db.Text
  parent_id                                                                                                               Int?
  country_id                                                                                                              Int?
  grant_type_attributecol                                                                                                 String?                                 @db.VarChar(45)
  is_disabled                                                                                                             Boolean?                                @default(false)
  updated_time                                                                                                            DateTime?                               @default(now()) @db.DateTime(0)
  created_time                                                                                                            DateTime?                               @default(now()) @db.DateTime(0)
  is_deleted                                                                                                              Boolean?                                @default(false)
  order                                                                                                                   Int?
  grant_scheme_has_grant_type_attribute_grant_scheme_has_grant_type_attribute_agency_idTogrant_type_attribute             grant_scheme_has_grant_type_attribute[] @relation("grant_scheme_has_grant_type_attribute_agency_idTogrant_type_attribute")
  grant_scheme_has_grant_type_attribute_grant_scheme_has_grant_type_attribute_business_size_idTogrant_type_attribute      grant_scheme_has_grant_type_attribute[] @relation("grant_scheme_has_grant_type_attribute_business_size_idTogrant_type_attribute")
  grant_scheme_has_grant_type_attribute_grant_scheme_has_grant_type_attribute_business_stage_idTogrant_type_attribute     grant_scheme_has_grant_type_attribute[] @relation("grant_scheme_has_grant_type_attribute_business_stage_idTogrant_type_attribute")
  grant_scheme_has_grant_type_attribute_grant_scheme_has_grant_type_attribute_industry_idTogrant_type_attribute           grant_scheme_has_grant_type_attribute[] @relation("grant_scheme_has_grant_type_attribute_industry_idTogrant_type_attribute")
  grant_scheme_has_grant_type_attribute_grant_scheme_has_grant_type_attribute_local_shareholding_idTogrant_type_attribute grant_scheme_has_grant_type_attribute[] @relation("grant_scheme_has_grant_type_attribute_local_shareholding_idTogrant_type_attribute")
  grant_scheme_has_grant_type_attribute_grant_scheme_has_grant_type_attribute_needs_based_idTogrant_type_attribute        grant_scheme_has_grant_type_attribute[] @relation("grant_scheme_has_grant_type_attribute_needs_based_idTogrant_type_attribute")
  grant_scheme_has_grant_type_attribute_grant_scheme_has_grant_type_attribute_number_employees_idTogrant_type_attribute   grant_scheme_has_grant_type_attribute[] @relation("grant_scheme_has_grant_type_attribute_number_employees_idTogrant_type_attribute")
  grant_scheme_has_grant_type_attribute_grant_scheme_has_grant_type_attribute_type_idTogrant_type_attribute               grant_scheme_has_grant_type_attribute[] @relation("grant_scheme_has_grant_type_attribute_type_idTogrant_type_attribute")
  grant_scheme_has_grant_type_attribute_grant_scheme_has_grant_type_attribute_years_operation_idTogrant_type_attribute    grant_scheme_has_grant_type_attribute[] @relation("grant_scheme_has_grant_type_attribute_years_operation_idTogrant_type_attribute")
  country                                                                                                                 country?                                @relation(fields: [country_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_grant_type_attribute_country")
  grant_type_attribute                                                                                                    grant_type_attribute?                   @relation("grant_type_attributeTogrant_type_attribute", fields: [parent_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_grant_type_attribute_self")
  other_grant_type_attribute                                                                                              grant_type_attribute[]                  @relation("grant_type_attributeTogrant_type_attribute")
  grant_type                                                                                                              grant_type?                             @relation(fields: [grant_type_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_grant_type_attribute_type")

  @@index([country_id], map: "fk_grant_type_attribute_country_idx")
  @@index([parent_id], map: "fk_grant_type_attribute_self_idx")
  @@index([grant_type_id], map: "fk_grant_type_attribute_type_idx")
}

model group_has_user {
  group_id   Int
  user_id    Int
  is_deleted Boolean?   @default(false)
  team_group team_group @relation(fields: [group_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_group_id")
  user       user       @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_user_id_1")

  @@id([group_id, user_id])
  @@index([group_id], map: "fk_group_id_idx")
  @@index([user_id], map: "fk_user_id_idx")
}

model history_company {
  id                                                    Int             @id @default(autoincrement())
  company_id                                            Int
  task_id                                               Int
  company_code                                          String?         @db.VarChar(255)
  country_id                                            Int?
  company_reg_no                                        String?         @db.VarChar(255)
  name                                                  String?         @db.VarChar(255)
  company_status_id                                     Int?            @default(1)
  entity_type_id                                        Int?
  company_suffix_id                                     Int?
  preventive_name                                       String?         @db.VarChar(255)
  address                                               String?         @db.VarChar(255)
  tin_code                                              String?         @db.VarChar(255)
  pin_code                                              String?         @db.VarChar(255)
  tax                                                   String?         @db.VarChar(255)
  description                                           String?         @db.VarChar(255)
  note                                                  String?         @db.VarChar(255)
  incorporation_date                                    DateTime?       @db.DateTime(0)
  xero_contact_id                                       String?         @db.VarChar(255)
  is_outside_company                                    Boolean?        @default(false)
  is_deleted                                            Boolean?
  renewal_date                                          DateTime?       @db.DateTime(0)
  billing_id                                            Int?
  contact_full_name                                     String?         @db.VarChar(255)
  contact_phone                                         String?         @db.VarChar(255)
  contact_email                                         String?         @db.VarChar(255)
  contact_address                                       String?         @db.VarChar(255)
  contact_phone_country_id                              Int?
  contact_phone_number                                  String?         @db.VarChar(255)
  contact_state                                         String?         @db.VarChar(255)
  contact_city                                          String?         @db.VarChar(255)
  contact_postal_code                                   String?         @db.VarChar(255)
  operating_country_id                                  Int?
  operating_city                                        String?         @db.VarChar(200)
  operating_state                                       String?         @db.VarChar(200)
  operating_postal_code                                 String?         @db.VarChar(20)
  source_fund                                           String?         @db.Text
  business_full_name                                    String?         @db.VarChar(200)
  business_address                                      String?         @db.VarChar(200)
  business_country_id                                   Int?
  business_city                                         String?         @db.VarChar(200)
  business_state                                        String?         @db.VarChar(200)
  business_postal_code                                  String?         @db.VarChar(20)
  business_day_end                                      Int?
  business_month_end                                    Int?
  share_capital_par_value                               Int?
  share_capital_type_of_share                           Int?
  share_capital_number_share                            Int?
  share_capital                                         Int?
  share_capital_class_of_share                          String?         @db.VarChar(255)
  articles_of_organization                              Int?
  record_number                                         String?         @db.VarChar(255)
  num_of_checking_bank                                  Int?
  business_annual_report                                String?         @db.VarChar(255)
  seal_image                                            String?         @db.VarChar(255)
  left_checking_bank                                    Int?
  business_activity_detail                              String?         @db.Text
  created_time                                          DateTime?       @db.DateTime(0)
  updated_time                                          DateTime?       @db.DateTime(0)
  remaining_number_share                                String?         @db.VarChar(255)
  issued_number_share                                   String?         @db.VarChar(255)
  version                                               Int?            @default(0)
  CompanyHasBusinessActivity                            Json?
  country_history_company_country_idTocountry           country?        @relation("history_company_country_idTocountry", fields: [country_id], references: [id], map: "history_company_ibfk_1")
  company_status                                        company_status? @relation(fields: [company_status_id], references: [id], map: "history_company_ibfk_2")
  entity_type                                           entity_type?    @relation(fields: [entity_type_id], references: [id], map: "history_company_ibfk_3")
  company_suffix                                        company_suffix? @relation(fields: [company_suffix_id], references: [id], map: "history_company_ibfk_4")
  billing                                               billing?        @relation(fields: [billing_id], references: [id], map: "history_company_ibfk_5")
  country_history_company_operating_country_idTocountry country?        @relation("history_company_operating_country_idTocountry", fields: [operating_country_id], references: [id], map: "history_company_ibfk_6")
  country_history_company_business_country_idTocountry  country?        @relation("history_company_business_country_idTocountry", fields: [business_country_id], references: [id], map: "history_company_ibfk_7")

  @@index([billing_id], map: "billing_id")
  @@index([business_country_id], map: "business_country_id")
  @@index([company_status_id], map: "company_status_id")
  @@index([company_suffix_id], map: "company_suffix_id")
  @@index([country_id], map: "country_id")
  @@index([entity_type_id], map: "entity_type_id")
  @@index([operating_country_id], map: "operating_country_id")
}

model history_company_member {
  id                                                         Int          @id @default(autoincrement())
  task_id                                                    Int
  company_id                                                 Int?
  company_member_id                                          Int
  version                                                    Int
  country_id                                                 Int?
  type_member_id                                             Int?
  first_name                                                 String?      @db.VarChar(255)
  middle_name                                                String?      @db.VarChar(255)
  last_name                                                  String?      @db.VarChar(255)
  full_name                                                  String?      @db.VarChar(255)
  corporation_name                                           String?      @db.VarChar(255)
  corporation_number                                         String?      @db.VarChar(255)
  corporation_date                                           DateTime?    @db.DateTime(0)
  gender_id                                                  Int?
  major                                                      String?      @db.VarChar(255)
  phone                                                      String?      @db.VarChar(255)
  email                                                      String?      @db.VarChar(255)
  birthday                                                   DateTime?    @db.DateTime(0)
  birth_country_id                                           Int?
  address                                                    String?      @db.VarChar(255)
  service_address                                            String?      @db.VarChar(255)
  passport                                                   String?      @db.VarChar(255)
  passport_issue_date                                        DateTime?    @db.DateTime(0)
  passport_expire_date                                       DateTime?    @db.DateTime(0)
  ssn                                                        String?      @db.VarChar(255)
  description                                                String?      @db.VarChar(255)
  is_deleted                                                 Int?
  phone_country_id                                           Int?
  phone_number                                               String?      @db.VarChar(255)
  asset_source_fund_cast_in_bank                             Int?
  asset_source_fund_real_estate                              Int?
  asset_source_fund_other_detail                             String?      @db.VarChar(255)
  asset_source_fund_other_money                              Int?
  income_source_fund_investment                              Int?
  income_source_fund_self_employed                           Int?
  income_source_fund_other_detail                            String?      @db.VarChar(255)
  income_source_fund_other_money                             Int?
  is_nominee                                                 Int?         @default(0)
  is_approved                                                Int?         @default(0)
  operation_address                                          String?      @db.VarChar(255)
  nature_business                                            String?      @db.VarChar(255)
  relationship_intended_company                              String?      @db.VarChar(255)
  city                                                       String?      @db.VarChar(255)
  state                                                      String?      @db.VarChar(255)
  postal_code                                                String?      @db.VarChar(255)
  address_country_id                                         Int?
  created_time                                               DateTime     @db.DateTime(0)
  updated_time                                               DateTime     @db.DateTime(0)
  business_activity_detail                                   String?      @db.Text
  CompanyPositions                                           Json?
  CompanyShares                                              Json?
  CompanyInterests                                           Json?
  CompanyOwnerships                                          Json?
  Files                                                      Json?
  CompanyMemberReferences                                    Json?
  BusinessActivities                                         Json?
  country_history_company_member_country_idTocountry         country?     @relation("history_company_member_country_idTocountry", fields: [country_id], references: [id], map: "history_company_member_ibfk_2")
  type_member                                                type_member? @relation(fields: [type_member_id], references: [id], map: "history_company_member_ibfk_3")
  gender                                                     gender?      @relation(fields: [gender_id], references: [id], map: "history_company_member_ibfk_4")
  country_history_company_member_birth_country_idTocountry   country?     @relation("history_company_member_birth_country_idTocountry", fields: [birth_country_id], references: [id], map: "history_company_member_ibfk_5")
  country_history_company_member_phone_country_idTocountry   country?     @relation("history_company_member_phone_country_idTocountry", fields: [phone_country_id], references: [id], map: "history_company_member_ibfk_6")
  country_history_company_member_address_country_idTocountry country?     @relation("history_company_member_address_country_idTocountry", fields: [address_country_id], references: [id], map: "history_company_member_ibfk_7")

  @@unique([task_id, company_member_id, version], map: "companyMemberId_taskId_version")
  @@index([address_country_id], map: "address_country_id")
  @@index([birth_country_id], map: "birth_country_id")
  @@index([country_id], map: "country_id")
  @@index([gender_id], map: "gender_id")
  @@index([phone_country_id], map: "phone_country_id")
  @@index([type_member_id], map: "type_member_id")
}

model history_file {
  id                 Int             @id @default(autoincrement())
  history_log_cdc_id Int
  file_id            Int
  is_deleted         Int?            @default(0) @db.TinyInt
  created_time       DateTime?       @default(now()) @db.DateTime(0)
  updated_time       DateTime?       @default(now()) @db.DateTime(0)
  file               file            @relation(fields: [file_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "history_file_file")
  history_log_cdc    history_log_cdc @relation(fields: [history_log_cdc_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "history_file_history_log_cdc")

  @@index([file_id], map: "history_file_file_idx")
  @@index([history_log_cdc_id], map: "history_file_history_log_cdc_idx")
}

model history_log_cdc {
  id                  Int             @id @default(autoincrement())
  user_id             Int
  task_id             Int
  is_deleted          Int?            @default(0) @db.TinyInt
  created_time        DateTime?       @default(now()) @db.DateTime(0)
  updated_time        DateTime?       @default(now()) @db.DateTime(0)
  action_step_type_id Int?
  company_id          Int?
  history_file        history_file[]
  action_step_type    actionStepType? @relation(fields: [action_step_type_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "history_log_cdc_action_step_type")
  company             company?        @relation(fields: [company_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "history_log_cdc_company")
  task                task            @relation(fields: [task_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "history_log_cdc_task")
  user                user            @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "history_log_cdc_user")

  @@index([action_step_type_id], map: "history_log_cdc_action_step_type_idx")
  @@index([company_id], map: "history_log_cdc_company_idx")
  @@index([user_id], map: "history_log_cdc_user_idx")
  @@index([task_id], map: "history_log_cdc_user_idx1")
}

model holiday {
  id           Int       @id @default(autoincrement())
  name         String    @db.Text
  day          Int
  month        Int
  year         Int
  date         DateTime? @db.Date
  country_id   Int?
  is_deleted   Int?      @default(0) @db.TinyInt
  created_time DateTime? @default(now()) @db.DateTime(0)
  updated_time DateTime? @default(now()) @db.DateTime(0)
  country      country?  @relation(fields: [country_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_holiday_country_idx")

  @@index([country_id], map: "fk_holiday_country_idx")
}

model limit {
  id                  Int               @id @default(autoincrement())
  name                String?           @db.VarChar(100)
  limit_type_id       Int
  permission_group_id Int?
  permission_id       Int?
  model               String?           @db.VarChar(100)
  is_deleted          Boolean?          @default(false)
  created_time        DateTime?         @default(now()) @db.DateTime(0)
  updated_time        DateTime?         @default(now()) @db.DateTime(0)
  limit_type          limit_type        @relation(fields: [limit_type_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_lim_limit_type_id_lim_id_300x")
  permission_group    permission_group? @relation(fields: [permission_group_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_lim_permission_group_id_per_id_1apk")
  permission          permission?       @relation(fields: [permission_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_lim_permission_id_per_id_fj5t")
  limit_value         limit_value[]
  role_has_limit      role_has_limit[]

  @@index([limit_type_id], map: "fk_limit_type_id_idx")
  @@index([permission_group_id], map: "fk_permission_group_id_idx")
  @@index([permission_id], map: "fk_permission_id_idx")
}

model limit_type {
  id           Int       @id @default(autoincrement())
  name         String?   @db.VarChar(45)
  description  String?   @db.VarChar(200)
  is_deleted   Boolean   @default(false)
  created_time DateTime? @default(now()) @db.DateTime(0)
  updated_time DateTime? @default(now()) @db.DateTime(0)
  limit        limit[]
}

model limit_value {
  id           Int       @id @default(autoincrement())
  limit_id     Int
  name         String?   @db.VarChar(100)
  description  String?   @db.VarChar(300)
  is_deleted   Boolean   @default(false)
  created_time DateTime? @default(now()) @db.DateTime(0)
  updated_time DateTime? @default(now()) @db.DateTime(0)
  limit        limit     @relation(fields: [limit_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_lim_limit_id_lim_id_ge13")

  @@index([limit_id], map: "fk_limit_id_1_idx")
  @@index([limit_id], map: "fk_limit_id_idx")
}

model mailchimp_campaign {
  id                        Int                         @id @default(autoincrement())
  name                      String?                     @db.VarChar(225)
  workflow_id               String?                     @db.VarChar(45)
  mailchimp_type_id         Int?
  parent_id                 Int?
  mailchimp_campaign_member mailchimp_campaign_member[]
  mailchimp_summary         mailchimp_summary[]
}

model mailchimp_campaign_member {
  id                        Int                 @id @default(autoincrement())
  mailchimp_member_email_id String?             @db.VarChar(255)
  mailchimp_campaign_id     Int?
  conv_date                 String?             @db.VarChar(255)
  type                      String?             @db.VarChar(255)
  reason                    String?             @db.VarChar(255)
  created_time              DateTime            @default(now()) @db.DateTime(0)
  mailchimp_campaign        mailchimp_campaign? @relation(fields: [mailchimp_campaign_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_mai_mailchimp_campaign_id_mai_id_gjmi")
  mailchimp_member          mailchimp_member?   @relation(fields: [mailchimp_member_email_id], references: [email_id], onDelete: NoAction, onUpdate: NoAction, map: "fk_mai_mailchimp_member_email_id_mai_email_id_jbpa")

  @@index([mailchimp_campaign_id], map: "fk_mai_mailchimp_campaign_id_mai_id_gjmi")
  @@index([mailchimp_member_email_id], map: "fk_mai_mailchimp_member_email_id_mai_email_id_jbpa")
}

model mailchimp_member {
  email_id                  String                      @id @db.VarChar(255)
  email_address             String?                     @db.VarChar(255)
  opt_in_time               DateTime?                   @db.DateTime(0)
  is_deleted                Int?                        @default(0)
  mailchimp_campaign_member mailchimp_campaign_member[]
}

model mailchimp_summary {
  id                    Int                 @id @default(autoincrement())
  open                  Int?
  unique_open           Int?
  click                 Int?
  subscriber_click      Int?
  email_sent            Int?
  unsubscribed          Int?
  bounced               Int?
  abused_report         Int?
  mailchimp_campaign_id Int?
  created_time          DateTime            @default(now()) @db.DateTime(0)
  mailchimp_campaign    mailchimp_campaign? @relation(fields: [mailchimp_campaign_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_mai_mailchimp_campaign_id_mai_id_kf6o")

  @@index([mailchimp_campaign_id], map: "fk_mai_mailchimp_campaign_id_mai_id_kf6o")
}

model mailchimp_tag {
  id              Int           @id @default(autoincrement())
  name            String?       @db.VarChar(200)
  description     String?       @db.Text
  contact_from_id Int?
  created_time    DateTime?     @default(now()) @db.DateTime(0)
  updated_time    DateTime?     @default(now()) @db.DateTime(0)
  is_deleted      Int           @default(0) @db.TinyInt
  contact_from    contact_from? @relation(fields: [contact_from_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_mt_contact_form")

  @@index([contact_from_id], map: "fk_mt_contact_form_idx")
}

model message {
  id              Int          @id @default(autoincrement())
  user_id         Int
  content         String?      @db.VarChar(255)
  created_time    DateTime     @default(now()) @db.DateTime(0)
  support_case_id Int
  is_deleted      Boolean?     @default(false)
  file            file[]
  support_case    support_case @relation(fields: [support_case_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_mes_support_case_id_sup_id_1au7")
  user            user         @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_mes_user_id_use_id_1n2l")

  @@index([support_case_id], map: "fk_mes_support_case_id_sup_id_1au7")
  @@index([user_id], map: "fk_mes_user_id_use_id_1n2l")
}

model migration {
  id           Int      @id @default(autoincrement())
  timestamp    BigInt
  file_name    String   @db.VarChar(255)
  created_time DateTime @default(now()) @db.DateTime(0)
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model note {
  id                   Int                @id @default(autoincrement())
  title                String?            @db.VarChar(255)
  description          String?            @db.Text
  task_id              Int?
  company_member_id    Int?
  is_belong_to_client  Int?               @default(0) @db.TinyInt
  user_id              Int?
  created_time         DateTime?          @default(now()) @db.DateTime(0)
  updated_time         DateTime?          @default(now()) @db.DateTime(0)
  is_deleted           Int                @default(0) @db.TinyInt
  note_type_id         Int?
  company_id           Int?
  parent_id            Int?
  note_status_id       Int?
  is_compliance_reject Int?               @default(2)
  process_step_id      Int?
  file                 file[]
  company              company?           @relation(fields: [company_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_not_company_id_com_id_2qri")
  company_member       company_member?    @relation(fields: [company_member_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_not_company_member_id_com_id_bvv1")
  note_type            note_type?         @relation(fields: [note_type_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_not_note_type_id_not_id_fd6c")
  task                 task?              @relation(fields: [task_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_not_task_id_tas_id_2hck")
  user                 user?              @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_not_user_id_use_id_bxzk")
  process_step         process_step?      @relation(fields: [process_step_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_note_process_step_id")
  process_has_note     process_has_note[]

  @@index([user_id], map: "fk_not_user_id_use_id_bxzk")
  @@index([company_id], map: "fk_note_company_idx")
  @@index([company_member_id], map: "fk_note_company_member_id_idx")
  @@index([process_step_id], map: "fk_note_process_step_id_idx")
  @@index([task_id], map: "fk_note_task_id_idx")
  @@index([note_type_id], map: "fk_note_type_id_idx")
}

model note_type {
  id           Int       @id @default(autoincrement())
  name         String?   @db.VarChar(255)
  created_time DateTime? @default(now()) @db.DateTime(0)
  updated_time DateTime? @default(now()) @db.DateTime(0)
  is_deleted   Boolean?  @default(false)
  note         note[]
}

model notification {
  id                    Int                     @id @default(autoincrement())
  type                  Int?
  description           String?                 @db.VarChar(255)
  target_id             Int?
  order_id              Int?
  task_id               Int?
  profile_id            Int?
  support_case_id       Int?
  created_time          DateTime?               @default(now()) @db.DateTime(0)
  is_read               Boolean?
  is_deleted            Boolean?                @default(false)
  notification_type_id  Int?
  notification_type     notification_type?      @relation(fields: [notification_type_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_not_notification_type_id_not_id_6s6")
  user_has_notification user_has_notification[]

  @@index([notification_type_id], map: "fk_not_notification_type_id_not_id_6s6")
}

model notification_status {
  id                    Int                     @id
  name                  String?                 @db.VarChar(45)
  is_deleted            Boolean?                @default(false)
  created_time          DateTime?               @default(now()) @db.DateTime(0)
  updated_time          DateTime?               @default(now()) @db.DateTime(0)
  notification_template notification_template[]
}

model notification_template {
  id                             Int                              @id @default(autoincrement())
  message                        String?                          @db.Text
  is_notify_to_supporter         Boolean?                         @default(false)
  is_notify_to_customer          Boolean?                         @default(false)
  is_notify_to_leader            Boolean?                         @default(false)
  notification_status_id         Int?
  notification_type_id           Int?
  process_step_id                Int?
  action_step_type_id            Int?
  subscription_id                Int?
  is_deleted                     Boolean?                         @default(false)
  created_time                   DateTime?                        @default(now()) @db.DateTime(0)
  updated_time                   DateTime?                        @default(now()) @db.DateTime(0)
  action_step_type               actionStepType?                  @relation(fields: [action_step_type_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_not_action_step_type_id_act_id_hhlp1")
  notification_status            notification_status?             @relation(fields: [notification_status_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_not_notification_status_id_not_id_kcna1")
  notification_type              notification_type?               @relation(fields: [notification_type_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_not_notification_type_id_not_id_1m6s1")
  process_step                   process_step?                    @relation(fields: [process_step_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_not_process_step_id_pro_id_5fmh1")
  subscription                   subscription?                    @relation(fields: [subscription_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_not_subscription_id_sub_id_4kt21")
  notification_template_has_role notification_template_has_role[]

  @@index([notification_status_id], map: "fk_notification_status_id_idx")
  @@index([notification_type_id], map: "fk_notification_type_id_idx")
  @@index([action_step_type_id], map: "fk_notify_action_step_type_id_idx")
  @@index([process_step_id], map: "fk_notify_process_step_id_idx")
  @@index([subscription_id], map: "fk_notify_subscription_id_idx")
}

model notification_template_has_role {
  notification_template_id Int
  role_id                  Int
  notification_template    notification_template @relation(fields: [notification_template_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_not_notification_template_id_not_id_ey8v")
  role                     role                  @relation(fields: [role_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_not_role_id_rol_id_an5u")

  @@id([notification_template_id, role_id])
  @@index([role_id], map: "fk_notify_role_idx_idx")
}

model notification_type {
  id                    Int                     @id @default(autoincrement())
  name                  String?                 @db.VarChar(45)
  created_time          DateTime?               @default(now()) @db.DateTime(0)
  updated_time          DateTime?               @default(now()) @db.DateTime(0)
  is_deleted            Int                     @default(0) @db.TinyInt
  notification          notification[]
  notification_template notification_template[]
}

model option {
  id                   Int                    @id @default(autoincrement())
  content              String                 @db.Text
  question_id          Int
  description          String?                @db.Text
  is_deleted           Int?                   @default(0) @db.TinyInt
  answer               answer[]
  question             question               @relation(fields: [question_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_opt_question_id_que_id_1cr1")
  tool_business_entity tool_business_entity[]

  @@index([question_id], map: "fk_option_question_idx")
}

model order {
  id                                               Int                      @id @default(autoincrement())
  customer_id                                      Int?
  company_id                                       Int?
  amount                                           Float?                   @default(0) @db.Float
  amount_converted                                 Float?                   @default(0) @db.Float
  amount_code                                      String?                  @db.VarChar(45)
  amount_exchange_rate                             Float?                   @default(0) @db.Float
  paid_amount                                      Float?                   @default(0) @db.Float
  refund_amount                                    Float?                   @default(0) @db.Float
  discount                                         Float?                   @default(0) @db.Float
  credit_amount                                    Float?                   @default(0) @db.Float
  credit_description                               String?                  @db.VarChar(255)
  annual_fee                                       Float?                   @default(0) @db.Float
  status                                           Int?                     @default(0)
  is_invoiced                                      Boolean?
  order_code                                       String?                  @db.VarChar(255)
  xero_invoice_id                                  String?                  @db.VarChar(255)
  payment_gateway_id                               Int?
  paypal_order_id                                  String?                  @db.VarChar(255)
  paypal_invoice_id                                String?                  @db.VarChar(255)
  created_time                                     DateTime?                @default(now()) @db.DateTime(0)
  updated_time                                     DateTime?                @default(now()) @db.DateTime(0)
  is_deleted                                       Boolean?                 @default(false)
  xero_invoice_status_id                           Int?                     @default(1)
  xero_invoice_url                                 String?                  @db.VarChar(255)
  xero_invoice_no                                  String?                  @db.VarChar(255)
  order_status_id                                  Int?                     @default(0)
  paid_time                                        DateTime?                @db.DateTime(0)
  website_id                                       Int?                     @default(1)
  billing_id                                       Int?
  order_from_id                                    Int?
  country_card_id                                  Int?
  company_event                                    companyEvent[]
  customer_customer_order_idToorder                customer[]               @relation("customer_order_idToorder")
  file                                             file[]
  billing                                          billing?                 @relation(fields: [billing_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_ord_billing_id_bil_id_7408")
  company                                          company?                 @relation(fields: [company_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_ord_company_id_com_id_3fyj")
  customer_order_customer_idTocustomer             customer?                @relation("order_customer_idTocustomer", fields: [customer_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_ord_customer_id_cus_id_a3fz")
  order_status                                     order_status?            @relation(fields: [order_status_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_ord_order_status_id_ord_id_j2rt")
  payment_gateway                                  payment_gateway?         @relation(fields: [payment_gateway_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_ord_payment_gateway_id_pay_id_eysq")
  website                                          website?                 @relation(fields: [website_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_ord_website_id_web_id_e77e")
  xero_invoice_status                              xero_invoice_status?     @relation(fields: [xero_invoice_status_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_ord_xero_invoice_status_id_xer_id_46g8")
  country                                          country?                 @relation(fields: [country_card_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_order_country_card_id")
  order_from_id_order_order_from_idToorder_from_id order_from_id?           @relation("order_order_from_idToorder_from_id", fields: [order_from_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_order_from_id")
  order_has_bank                                   order_has_bank[]
  order_item                                       order_item[]
  payment_information                              payment_information[]
  support_case_has_order                           support_case_has_order[]
  task_task_order_idToorder                        task[]                   @relation("task_order_idToorder")
  task_task_upgrade_order_idToorder                task[]                   @relation("task_upgrade_order_idToorder")
  visaOrder                                        visaOrder[]
  voucher                                          voucher[]

  @@index([billing_id], map: "fk_ord_billing_id_bil_id_7408")
  @@index([company_id], map: "fk_ord_company_id_com_id_3fyj")
  @@index([customer_id], map: "fk_ord_customer_id_cus_id_a3fz")
  @@index([order_status_id], map: "fk_ord_order_status_id_ord_id_j2rt")
  @@index([payment_gateway_id], map: "fk_ord_payment_gateway_id_pay_id_eysq")
  @@index([website_id], map: "fk_ord_website_id_web_id_e77e")
  @@index([xero_invoice_status_id], map: "fk_ord_xero_invoice_status_id_xer_id_46g8")
  @@index([country_card_id], map: "fk_order_country_card_id_idx")
  @@index([order_from_id], map: "fk_order_from_id_idx")
}

model order_from_id {
  id                                       Int       @id @default(autoincrement())
  name                                     String?   @db.VarChar(45)
  is_deleted                               Boolean?  @default(false)
  created_time                             DateTime? @default(now()) @db.DateTime(0)
  updated_time                             DateTime? @default(now()) @db.DateTime(0)
  order_order_order_from_idToorder_from_id order[]   @relation("order_order_from_idToorder_from_id")
}

model order_has_bank {
  order_id Int
  bank_id  Int
  bank     bank  @relation(fields: [bank_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_order_bank_1")
  order    order @relation(fields: [order_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_order_bank_2")

  @@id([order_id, bank_id])
  @@index([bank_id], map: "fk_order_bank_1_idx")
}

model order_item {
  id                     Int                @id @default(autoincrement())
  order_id               Int?
  service_id             Int?
  package_id             Int?
  unit_price             Float?             @db.Float
  quantity               Int?
  amount                 Float?             @db.Float
  description            String?            @db.Text
  voucher_id             Int?
  promotion_id           Int?
  is_refund              Boolean?
  discount_order_item_id Int?
  order_item_status_id   Int?
  finished_time          DateTime?          @db.DateTime(0)
  created_time           DateTime?          @default(now()) @db.DateTime(0)
  updated_time           DateTime?          @default(now()) @db.DateTime(0)
  order                  order?             @relation(fields: [order_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_ord_order_id_ord_id_fvmb")
  order_item_status      order_item_status? @relation(fields: [order_item_status_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_ord_order_item_status_id_ord_id_8qd8")
  Renamedpackage         Renamedpackage?    @relation(fields: [package_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_ord_package_id_pac_id_3934")
  service                service?           @relation(fields: [service_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_ord_service_id_ser_id_hwno")

  @@index([order_id], map: "fk_ord_order_id_ord_id_fvmb")
  @@index([order_item_status_id], map: "fk_ord_order_item_status_id_ord_id_8qd8")
  @@index([package_id], map: "fk_ord_package_id_pac_id_3934")
  @@index([service_id], map: "fk_ord_service_id_ser_id_hwno")
}

model order_item_status {
  id           Int          @id @default(autoincrement())
  name         String?      @db.VarChar(45)
  order        Int?
  is_deleted   Boolean      @default(false)
  created_time DateTime?    @default(now()) @db.DateTime(0)
  updated_time DateTime?    @default(now()) @db.DateTime(0)
  order_item   order_item[]
}

model order_status {
  id         Int     @id
  name       String? @db.Text
  is_deleted Int     @default(0) @db.TinyInt
  order      Int?
  orders     order[]
}

/// This model has been renamed to 'Renamedpackage' during introspection, because the original name 'package' is reserved.
model Renamedpackage {
  id                   Int                   @id @default(autoincrement())
  service_type_id      Int?
  package_type_id      Int?
  country_id           Int?
  website_id           Int?
  entity_type_id       Int?
  name                 String?               @db.Text
  description          String?               @db.Text
  xero_item_id         String?               @db.VarChar(45)
  xero_item_code       String?               @db.VarChar(45)
  created_time         DateTime?             @default(now()) @db.DateTime(0)
  updated_time         DateTime?             @default(now()) @db.DateTime(0)
  is_deleted           Int                   @default(0)
  package_group_id     Int?
  package_annual_id    Int?
  customer             customer[]
  order_item           order_item[]
  Renamedpackage       Renamedpackage?       @relation("RenamedpackageToRenamedpackage", fields: [package_annual_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_package_annual")
  other_Renamedpackage Renamedpackage[]      @relation("RenamedpackageToRenamedpackage")
  country              country?              @relation(fields: [country_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_package_country1")
  entity_type          entity_type?          @relation(fields: [entity_type_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_package_entity_type1")
  package_group        package_group?        @relation(fields: [package_group_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_package_package_group")
  package_type         package_type?         @relation(fields: [package_type_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_package_package_type1")
  service_type         service_type?         @relation(fields: [service_type_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_package_service_type1")
  website              website?              @relation(fields: [website_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_package_website1")
  package_has_service  package_has_service[]

  @@index([package_annual_id], map: "fk_package_annual_idx")
  @@index([country_id], map: "fk_package_country1_idx")
  @@index([entity_type_id], map: "fk_package_entity_type1_idx")
  @@index([package_group_id], map: "fk_package_package_group_idx")
  @@index([package_type_id], map: "fk_package_package_type1")
  @@index([service_type_id], map: "fk_package_service_type1_idx")
  @@index([website_id], map: "fk_package_website1_idx")
  @@map("package")
}

model package_group {
  id             Int              @id @default(autoincrement())
  name           String?          @db.Text
  is_deleted     Int              @default(0) @db.TinyInt
  created_time   DateTime?        @default(now()) @db.DateTime(0)
  updated_time   DateTime?        @default(now()) @db.DateTime(0)
  Renamedpackage Renamedpackage[]
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model package_has_service {
  package_id     Int
  service_id     Int
  type_id        Int            @default(1)
  is_deleted     Boolean        @default(false)
  Renamedpackage Renamedpackage @relation(fields: [package_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "pks_package_fk")
  service        service        @relation(fields: [service_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "pks_service_fk")

  @@id([package_id, service_id, type_id])
  @@index([service_id], map: "pks_service_fk")
}

model package_type {
  id             Int              @id @default(autoincrement())
  name           String?          @db.Text
  description    String?          @db.Text
  is_deleted     Int              @default(0) @db.TinyInt
  created_time   DateTime?        @default(now()) @db.DateTime(0)
  updated_time   DateTime?        @default(now()) @db.DateTime(0)
  image          String?          @db.VarChar(200)
  Renamedpackage Renamedpackage[]
}

model payment_gateway {
  id         Int     @id @default(autoincrement())
  name       String? @db.VarChar(100)
  is_deleted Int     @default(0) @db.TinyInt
  order      order[]
}

model payment_information {
  id                          Int             @id @default(autoincrement())
  company_member_id           Int?
  order_id                    Int?
  task_id                     Int?
  date_of_payment             DateTime?       @db.DateTime(0)
  payment_amount              Int?
  name_on_card                String?         @db.VarChar(255)
  is_deleted                  Boolean?        @default(false)
  last_four_digits_on_card    Int?
  expired_date_of_card        DateTime?       @db.DateTime(0)
  issuing_bank                String?         @db.VarChar(255)
  email_address_of_cardholder String?         @db.VarChar(255)
  created_time                DateTime        @default(now()) @db.DateTime(0)
  updated_time                DateTime        @default(now()) @db.DateTime(0)
  company_member              company_member? @relation(fields: [company_member_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_pay_company_member_id_com_id_1axx")
  order                       order?          @relation(fields: [order_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_pay_order_id_ord_id_atc9")
  task                        task?           @relation(fields: [task_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_pay_task_id_tas_id_3ro9")

  @@index([company_member_id], map: "fk_pay_company_member_id_com_id_1axx")
  @@index([order_id], map: "fk_pay_order_id_ord_id_atc9")
  @@index([task_id], map: "fk_pay_task_id_tas_id_3ro9")
}

model permission {
  id                  Int                   @id @default(autoincrement())
  permission_group_id Int
  value               String                @unique(map: "value_UNIQUE") @db.VarChar(45)
  name                String?               @db.VarChar(45)
  description         String?               @db.VarChar(100)
  is_deleted          Int                   @default(0) @db.TinyInt
  limit               limit[]
  permission_group    permission_group      @relation(fields: [permission_group_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_per_permission_group_id_per_id_7klu")
  role_has_permission role_has_permission[]

  @@index([permission_group_id], map: "fk_permission_permission_group1_idx")
}

model permission_group {
  id         Int          @id @default(autoincrement())
  name       String?      @unique(map: "name_UNIQUE") @db.VarChar(45)
  is_deleted Int          @default(0) @db.TinyInt
  limit      limit[]
  permission permission[]
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model person {
  id                                       Int         @id @default(autoincrement())
  country_id                               Int?
  first_name                               String?     @db.VarChar(200)
  last_name                                String?     @db.VarChar(200)
  gender_id                                Int?
  phone                                    String?     @db.VarChar(45)
  phone_number                             String?     @db.VarChar(255)
  phone_country_id                         Int?
  email                                    String?     @db.VarChar(45)
  birthday                                 DateTime?   @db.Date
  address                                  String?     @db.Text
  ssn                                      String?     @db.VarChar(100)
  image                                    String?     @db.VarChar(250)
  status                                   Int?        @default(1) @db.TinyInt
  is_deleted                               Int?        @default(0) @db.TinyInt
  created_time                             DateTime?   @default(now()) @db.DateTime(0)
  updated_time                             DateTime?   @default(now()) @db.DateTime(0)
  title_name_id                            Int?
  customer                                 customer[]
  country_person_country_idTocountry       country?    @relation("person_country_idTocountry", fields: [country_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_per_country_id_cou_id_ggq6")
  gender                                   gender?     @relation(fields: [gender_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_person_gender1")
  country_person_phone_country_idTocountry country?    @relation("person_phone_country_idTocountry", fields: [phone_country_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_person_has_phone_country_idx")
  title_name                               title_name? @relation(fields: [title_name_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_person_title_name1")
  process                                  process[]
  user                                     user[]

  @@index([gender_id], map: "fk_person_gender1_idx")
  @@index([phone_country_id], map: "fk_person_has_phone_country_idx")
  @@index([title_name_id], map: "fk_person_title_name1_idx")
  @@index([country_id], map: "fk_profile_country1_idx")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model portal_post {
  id                                   Int                                    @id @default(autoincrement())
  portal_post_type_id                  Int
  country_id                           Int?
  guid                                 String?                                @db.Text
  title                                String?                                @db.Text
  content                              String?                                @db.Text
  excerpt                              String?                                @db.Text
  image                                String?                                @db.Text
  meta_title                           String?                                @db.Text
  meta_description                     String?                                @db.Text
  time_to_read                         Int?                                   @default(0)
  created_time                         DateTime?                              @default(now()) @db.DateTime(0)
  updated_time                         DateTime?                              @default(now()) @db.DateTime(0)
  is_popular                           Int?                                   @default(0) @db.TinyInt
  is_published                         Int                                    @default(0) @db.TinyInt
  is_deleted                           Int                                    @default(0) @db.TinyInt
  country                              country?                               @relation(fields: [country_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_portal_post_country1")
  portal_post_type                     portal_post_type                       @relation(fields: [portal_post_type_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_portal_post_portal_post_type1")
  portal_post_has_portal_post_category portal_post_has_portal_post_category[]
  portal_post_has_portal_post_tag      portal_post_has_portal_post_tag[]

  @@index([country_id], map: "fk_portal_post_country1")
  @@index([portal_post_type_id], map: "fk_portal_post_portal_post_type1_idx")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model portal_post_category {
  id                                   Int                                    @id @default(autoincrement())
  portal_type_id                       Int?
  name                                 String?                                @db.VarChar(45)
  guid                                 String?                                @db.Text
  type                                 Int?
  link                                 String?                                @db.Text
  description                          String?                                @db.Text
  is_deleted                           Int                                    @default(0) @db.TinyInt
  updated_time                         DateTime?                              @default(now()) @db.DateTime(0)
  portal_type                          portal_type?                           @relation(fields: [portal_type_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_portal_post_category_portal_type1")
  portal_post_has_portal_post_category portal_post_has_portal_post_category[]

  @@index([portal_type_id], map: "fk_portal_post_category_portal_type1_idx")
}

model portal_post_has_portal_post_category {
  portal_post_id          Int
  portal_post_category_id Int
  updated_time            DateTime?            @default(now()) @db.DateTime(0)
  portal_post             portal_post          @relation(fields: [portal_post_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_portal_post_has_portal_post_category_portal_post1")
  portal_post_category    portal_post_category @relation(fields: [portal_post_category_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_portal_post_has_portal_post_category_portal_post_category")

  @@id([portal_post_id, portal_post_category_id])
  @@index([portal_post_category_id], map: "fk_portal_post_has_portal_post_category_portal_post_categor_idx")
}

model portal_post_has_portal_post_tag {
  portal_post_id     Int
  portal_post_tag_id Int
  updated_time       DateTime?       @default(now()) @db.DateTime(0)
  portal_post        portal_post     @relation(fields: [portal_post_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_portal_post_has_portal_post_tag_portal_post1")
  portal_post_tag    portal_post_tag @relation(fields: [portal_post_tag_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_portal_post_has_portal_post_tag_portal_post_tag1")

  @@id([portal_post_id, portal_post_tag_id])
  @@index([portal_post_tag_id], map: "fk_portal_post_has_portal_post_tag_portal_post_tag1_idx")
}

model portal_post_tag {
  id                              Int                               @id @default(autoincrement())
  name                            String?                           @db.Text
  guid                            String?                           @db.Text
  is_deleted                      Int?                              @default(0) @db.TinyInt
  updated_time                    DateTime?                         @default(now()) @db.DateTime(0)
  portal_post_has_portal_post_tag portal_post_has_portal_post_tag[]
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model portal_post_type {
  id             Int           @id @default(autoincrement())
  portal_type_id Int?
  name           String?       @db.Text
  guid           String?       @db.Text
  type           Int?
  left           Int?
  right          Int?
  parent_id      Int?
  is_deleted     Int?          @default(0) @db.TinyInt
  portal_post    portal_post[]
  portal_type    portal_type?  @relation(fields: [portal_type_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_portal_post_type_portal_type1")

  @@index([portal_type_id], map: "fk_portal_post_type_portal_type1_idx")
}

model portal_type {
  id                   Int                    @id @default(autoincrement())
  website_id           Int                    @default(1)
  name                 String?                @db.Text
  is_deleted           Int                    @default(0) @db.TinyInt
  portal_post_category portal_post_category[]
  portal_post_type     portal_post_type[]
  website              website                @relation(fields: [website_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_portal_type_website")

  @@index([website_id], map: "fk_portal_type_website_idx")
}

model process {
  id                                                                               Int                         @id @default(autoincrement())
  task_id                                                                          Int
  process_step_id                                                                  Int
  person_id                                                                        Int?
  user_id                                                                          Int?
  is_approved                                                                      Int?
  is_rejected                                                                      Int?
  is_terminated                                                                    Int?
  created_time                                                                     DateTime?                   @default(now()) @db.DateTime(0)
  updated_time                                                                     DateTime?                   @default(now()) @db.DateTime(0)
  finished_time                                                                    DateTime?                   @db.DateTime(0)
  is_deleted                                                                       Boolean?                    @default(false)
  remind_start_time                                                                DateTime?                   @db.DateTime(0)
  status                                                                           Int?
  banking_process_id                                                               Int?
  addition_process_id                                                              Int?
  priority                                                                         Int?
  description                                                                      Json?
  parent_id                                                                        Json                        @default(dbgenerated("(_utf8mb4\\'[]\\')"))
  extra_value                                                                      Json?
  email                                                                            email[]
  email_trigger_has_process                                                        email_trigger_has_process[]
  addition_process                                                                 additionProcess?            @relation(fields: [addition_process_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_pro_addition_process_id_add_id_9meh")
  banking_process                                                                  bankingProcess?             @relation(fields: [banking_process_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_pro_banking_process_id_ban_id_1ta5")
  person                                                                           person?                     @relation(fields: [person_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_pro_person_id_per_id_4mwi")
  process_step                                                                     process_step                @relation(fields: [process_step_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_pro_process_step_id_pro_id_jv5i")
  task                                                                             task                        @relation(fields: [task_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_pro_task_id_tas_id_egl0")
  user                                                                             user?                       @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_pro_user_id_use_id_110w")
  process_has_note                                                                 process_has_note[]
  process_has_parent_process_process_has_parent_process_parent_process_idToprocess process_has_parent_process? @relation("process_has_parent_process_parent_process_idToprocess")
  process_has_parent_process_process_has_parent_process_process_idToprocess        process_has_parent_process? @relation("process_has_parent_process_process_idToprocess")
  process_log                                                                      process_log[]

  @@index([addition_process_id], map: "fk_pro_addition_process_id_add_id_9meh")
  @@index([banking_process_id], map: "fk_pro_banking_process_id_ban_id_1ta5")
  @@index([person_id], map: "fk_pro_person_id_per_id_4mwi")
  @@index([process_step_id], map: "fk_pro_process_step_id_pro_id_jv5i")
  @@index([task_id], map: "fk_pro_task_id_tas_id_egl0")
  @@index([user_id], map: "fk_pro_user_id_use_id_110w")
}

model process_has_note {
  process_id Int
  note_id    Int
  is_deleted Boolean? @default(false)
  note       note     @relation(fields: [note_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_pro_note_id_not_id_aby8")
  process    process  @relation(fields: [process_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_pro_process_id_pro_id_7b5a")

  @@id([process_id, note_id])
  @@index([note_id], map: "fk_pro_note_id_not_id_aby8")
}

model process_has_parent_process {
  process_id                                                    Int      @unique(map: "process_id")
  parent_process_id                                             Int      @unique(map: "parent_process_id")
  is_deleted                                                    Boolean? @default(false)
  process_process_has_parent_process_parent_process_idToprocess process  @relation("process_has_parent_process_parent_process_idToprocess", fields: [parent_process_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_pro_parent_process_id_pro_id_gqmr")
  process_process_has_parent_process_process_idToprocess        process  @relation("process_has_parent_process_process_idToprocess", fields: [process_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_pro_process_id_pro_id_bswa")

  @@id([process_id, parent_process_id])
}

model process_log {
  id                                                                     Int             @id @default(autoincrement())
  process_id                                                             Int?
  is_deleted                                                             Boolean?        @default(false)
  is_finished                                                            Int?            @default(0)
  created_time                                                           DateTime?       @default(now()) @db.DateTime(0)
  finished_time                                                          DateTime?       @db.DateTime(0)
  is_log_mail                                                            Boolean?        @default(false)
  is_remind                                                              Boolean?        @default(false)
  description                                                            String?         @db.VarChar(255)
  agent_id                                                               Int?
  file_template_id                                                       Int?
  company_member_id                                                      Int?
  belong_to_company_member_id                                            Int?
  email_template_id                                                      Int?
  agent                                                                  agent?          @relation(fields: [agent_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_pro_agent_id_age_id_6pr9")
  company_member_process_log_belong_to_company_member_idTocompany_member company_member? @relation("process_log_belong_to_company_member_idTocompany_member", fields: [belong_to_company_member_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_pro_belong_to_company_member_id_com_id_f9aw")
  company_member_process_log_company_member_idTocompany_member           company_member? @relation("process_log_company_member_idTocompany_member", fields: [company_member_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_pro_company_member_id_com_id_e3mj")
  file_template                                                          file_template?  @relation(fields: [file_template_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_pro_file_template_id_fil_id_c3wc")
  process                                                                process?        @relation(fields: [process_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_pro_process_id_pro_id_1wjq")

  @@index([agent_id], map: "fk_pro_agent_id_age_id_6pr9")
  @@index([belong_to_company_member_id], map: "fk_pro_belong_to_company_member_id_com_id_f9aw")
  @@index([company_member_id], map: "fk_pro_company_member_id_com_id_e3mj")
  @@index([file_template_id], map: "fk_pro_file_template_id_fil_id_c3wc")
  @@index([process_id], map: "fk_pro_process_id_pro_id_1wjq")
}

model process_step {
  id                                                                         Int                              @id @default(autoincrement())
  value                                                                      Int?                             @unique(map: "value_UNIQUE")
  name                                                                       String?                          @db.VarChar(100)
  description                                                                String?                          @db.Text
  is_deleted                                                                 Int                              @default(0) @db.TinyInt
  left                                                                       Int?
  right                                                                      Int?
  parent_id                                                                  Int?
  description_display                                                        String?                          @db.Text
  is_generated_file                                                          Boolean?                         @default(false)
  is_send_link_signed                                                        Boolean?                         @default(false)
  order                                                                      Int?
  process_step_type_id                                                       Int?
  action_process_step_action_process_step_next_process_step_idToprocess_step actionProcessStep[]              @relation("action_process_step_next_process_step_idToprocess_step")
  action_process_step_action_process_step_process_step_idToprocess_step      actionProcessStep[]              @relation("action_process_step_process_step_idToprocess_step")
  email_template                                                             email_template[]
  email_trigger                                                              email_trigger[]
  note                                                                       note[]
  notification_template                                                      notification_template[]
  process                                                                    process[]
  process_step_type                                                          process_step_type?               @relation(fields: [process_step_type_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_pro_process_step_type_id_pro_id_7rk3")
  process_step                                                               process_step?                    @relation("process_stepToprocess_step", fields: [parent_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "parent_id")
  other_process_step                                                         process_step[]                   @relation("process_stepToprocess_step")
  process_step_has_file_template                                             process_step_has_file_template[]
  process_step_has_role_process_step_has_role_process_step_idToprocess_step  process_step_has_role[]          @relation("process_step_has_role_process_step_idToprocess_step")
  process_step_has_role_process_step_has_role_role_idToprocess_step          process_step_has_role[]          @relation("process_step_has_role_role_idToprocess_step")

  @@index([process_step_type_id], map: "fk_pro_process_step_type_id_pro_id_e8sy")
  @@index([parent_id], map: "parent_id_idx")
}

model process_step_has_file_template {
  process_step_id  Int
  file_template_id Int
  order            Int?
  file_template    file_template @relation(fields: [file_template_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_pft_file_template_id")
  process_step     process_step  @relation(fields: [process_step_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_pft_process_step_id")

  @@id([process_step_id, file_template_id])
  @@index([file_template_id], map: "fk_pft_file_template_id")
  @@index([process_step_id], map: "fk_pft_process_step_id")
}

model process_step_has_role {
  process_step_id                                                  Int
  role_id                                                          Int
  is_main                                                          Int?         @default(0)
  process_step_process_step_has_role_process_step_idToprocess_step process_step @relation("process_step_has_role_process_step_idToprocess_step", fields: [process_step_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_pr_process_step_id")
  process_step_process_step_has_role_role_idToprocess_step         process_step @relation("process_step_has_role_role_idToprocess_step", fields: [role_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_pr_role_id")
  role                                                             role         @relation(fields: [role_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_pro_role_id_rol_id_arob")

  @@id([process_step_id, role_id])
  @@index([process_step_id], map: "fk_pr_process_step_id")
  @@index([role_id], map: "fk_pr_role_id")
}

model process_step_type {
  id             Int            @id @default(autoincrement())
  name           String?        @db.VarChar(255)
  relation_types Json?
  is_deleted     Boolean?       @default(false)
  created_time   DateTime?      @default(now()) @db.DateTime(0)
  updated_time   DateTime?      @default(now()) @db.DateTime(0)
  is_dashboard   Boolean?       @default(false)
  process_step   process_step[]
}

model promotion {
  id             Int       @id @default(autoincrement())
  promotion_code String?   @db.VarChar(255)
  percent        Int?      @default(0)
  amount         Int?      @default(0)
  is_deleted     Boolean?  @default(false)
  is_used        Boolean?  @default(false)
  created_time   DateTime? @default(now()) @db.DateTime(0)
}

model proposed_name {
  id                Int             @id @default(autoincrement())
  name              String?         @db.VarChar(255)
  company_suffix_id Int?
  task_id           Int?
  company_id        Int?
  is_approve        Boolean?
  is_sent_agent     Boolean?        @default(false)
  is_sent_customer  Boolean?        @default(false)
  is_confirmed      Boolean?        @default(false)
  is_deleted        Boolean?        @default(false)
  created_time      DateTime?       @default(now()) @db.DateTime(0)
  updated_time      DateTime?       @default(now()) @db.DateTime(0)
  company           company?        @relation(fields: [company_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_pro_company_id_com_id_7hyb")
  company_suffix    company_suffix? @relation(fields: [company_suffix_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_pro_company_suffix_id_com_id_5kou")
  task              task?           @relation(fields: [task_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_pro_task_id_tas_id_62jn")

  @@index([company_id], map: "fk_pro_company_id_com_id_7hyb")
  @@index([company_suffix_id], map: "fk_pro_company_suffix_id_com_id_5kou")
  @@index([task_id], map: "fk_pro_task_id_tas_id_62jn")
}

model proposed_time {
  id                 Int            @id @default(autoincrement())
  banking_process_id Int
  from_time          Int
  to_time            Int
  created_time       DateTime?      @default(now()) @db.DateTime(0)
  updated_time       DateTime?      @default(now()) @db.DateTime(0)
  is_deleted         Int?           @default(0)
  banking_process    bankingProcess @relation(fields: [banking_process_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_pro_banking_process_id_ban_id_24j5")

  @@index([banking_process_id], map: "fk_pro_banking_process_id_ban_id_24j5")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model question {
  id                          Int                           @id @default(autoincrement())
  content                     String                        @db.Text
  question_parent_id          Int?
  is_belong_to_fatca          Boolean?                      @default(false)
  question_type_id            Int?
  is_deleted                  Boolean?                      @default(false)
  created_time                DateTime?                     @default(now()) @db.DateTime(0)
  updated_time                DateTime?                     @default(now()) @db.DateTime(0)
  question_priority_id        Int?
  description                 String?                       @db.Text
  answer                      answer[]
  country_has_question        country_has_question[]
  option                      option[]
  question_priority           question_priority?            @relation(fields: [question_priority_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_que_question_priority_id_que_id_d9ca")
  question_type               question_type?                @relation(fields: [question_type_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_question_type_idx")
  question                    question?                     @relation("questionToquestion", fields: [question_parent_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_taque_question_parent_idx")
  other_question              question[]                    @relation("questionToquestion")
  question_group_has_question question_group_has_question[]

  @@index([question_priority_id], map: "fk_question_priority_idx_idx")
  @@index([question_type_id], map: "fk_question_type_idx")
  @@index([question_parent_id], map: "fk_taque_question_parent_idx")
}

model question_group {
  id                          Int                           @id @default(autoincrement())
  name                        String?                       @db.VarChar(200)
  left                        Int?
  right                       Int?
  file_template_id            Int?
  order                       Int?
  is_deleted                  Int?                          @default(0) @db.TinyInt
  file                        file[]
  question_group_has_question question_group_has_question[]
}

model question_group_has_question {
  question_group_id Int
  question_id       Int
  question_group    question_group @relation(fields: [question_group_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_que_question_group_id_que_id_8n8k")
  question          question       @relation(fields: [question_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_que_question_id_que_id_16u5")

  @@id([question_id, question_group_id])
  @@index([question_group_id], map: "fk_que_question_group_id_que_id_ddx8")
}

model question_priority {
  id          Int        @id @default(autoincrement())
  name        String?    @db.VarChar(45)
  description String?    @db.Text
  is_deleted  Int?       @default(0)
  question    question[]
}

model question_type {
  id       Int        @id @default(autoincrement())
  name     String     @db.Text
  question question[]
}

model ranking_partner {
  id                      Int                   @id @default(autoincrement())
  name                    String?               @db.VarChar(255)
  task_id                 Int
  ranking                 Int?
  ranking_partner_type_id Int?
  created_time            DateTime?             @default(now()) @db.DateTime(0)
  updated_time            DateTime?             @default(now()) @db.DateTime(0)
  is_deleted              Int?                  @default(0)
  file                    file[]
  ranking_partner_type    ranking_partner_type? @relation(fields: [ranking_partner_type_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_ran_ranking_partner_type_id_ran_id_3u9b")
  task                    task                  @relation(fields: [task_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_ran_task_id_tas_id_badp")

  @@index([ranking_partner_type_id], map: "fk_ran_ranking_partner_type_id_ran_id_3u9b")
  @@index([task_id], map: "fk_ran_task_id_tas_id_badp")
}

model ranking_partner_type {
  id                                     Int                                      @id @default(autoincrement())
  name                                   String?                                  @db.VarChar(45)
  is_deleted                             Boolean?                                 @default(false)
  created_time                           DateTime?                                @default(now()) @db.DateTime(0)
  updated_time                           DateTime?                                @default(now()) @db.DateTime(0)
  file_template_has_ranking_partner_type file_template_has_ranking_partner_type[]
  ranking_partner                        ranking_partner[]
}

model rate {
  id             Int      @id @default(autoincrement())
  rate_source_id Int?
  ip             String?  @db.VarChar(255)
  score          Int?
  email          String?  @db.VarChar(255)
  description    String?  @db.VarChar(255)
  is_deleted     Boolean? @default(false)
  created_time   DateTime @default(now()) @db.DateTime(0)
  updated_time   DateTime @default(now()) @db.DateTime(0)
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model role {
  id                             Int                              @id @default(autoincrement())
  name                           String?                          @db.VarChar(45)
  value                          String?                          @default("") @db.VarChar(100)
  left                           Int?
  right                          Int?
  parent_id                      Int?
  description                    String?                          @db.Text
  status                         Int?                             @default(1) @db.TinyInt
  color_code                     Json?
  is_deleted                     Int?                             @default(0) @db.TinyInt
  created_time                   DateTime?                        @default(now()) @db.DateTime(0)
  updated_time                   DateTime?                        @default(now()) @db.DateTime(0)
  email_template_has_receiver    email_template_has_receiver[]
  notification_template_has_role notification_template_has_role[]
  process_step_has_role          process_step_has_role[]
  role                           role?                            @relation("roleTorole", fields: [parent_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_role_role1")
  other_role                     role[]                           @relation("roleTorole")
  role_has_limit                 role_has_limit[]
  role_has_permission            role_has_permission[]
  user_has_role                  user_has_role[]

  @@index([parent_id], map: "fk_role_role1_idx")
}

model role_has_limit {
  role_id  Int
  limit_id Int
  limit    limit @relation(fields: [limit_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_limit_id")
  role     role  @relation(fields: [role_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_rol_role_id_rol_id_2dyi")

  @@id([role_id, limit_id])
  @@index([limit_id], map: "fk_limit_id_idx")
}

model role_has_permission {
  role_id       Int
  permission_id Int
  permission    permission @relation(fields: [permission_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_rol_permission_id_per_id_dk65")
  role          role       @relation(fields: [role_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_rol_role_id_rol_id_6qlw")

  @@id([role_id, permission_id])
  @@index([permission_id], map: "fk_role_has_permission_permission1_idx")
  @@index([role_id], map: "fk_role_has_permission_role1_idx")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model service {
  id                                                 Int                               @id @default(autoincrement())
  service_type_id                                    Int
  website_id                                         Int                               @default(1)
  visa_type_id                                       Int?
  visa_purpose_id                                    Int?
  car_type_id                                        Int?
  car_seat_id                                        Int?
  airport_id                                         Int?
  service_unit_id                                    Int?
  name                                               String?                           @db.Text
  description                                        String?                           @db.Text
  xero_item_id                                       String?                           @db.VarChar(45)
  xero_item_code                                     String?                           @db.VarChar(45)
  uuid                                               String?                           @db.Char(36)
  xero_account_id                                    Int?
  created_time                                       DateTime?                         @default(now()) @db.DateTime(0)
  updated_time                                       DateTime?                         @default(now()) @db.DateTime(0)
  is_deleted                                         Int                               @default(0) @db.TinyInt
  is_active                                          Boolean?                          @default(true)
  is_service_outside_company                         Boolean?                          @default(false)
  is_displayed                                       Boolean?                          @default(true)
  is_attach_incorp                                   Int?                              @default(1) @db.TinyInt
  quantity                                           Int?
  upgrade_service_id                                 Int?
  discount_service_id                                Int?
  company_event                                      companyEvent[]
  country_has_service                                country_has_service[]
  fee                                                fee[]
  order_item                                         order_item[]
  package_has_service                                package_has_service[]
  service_service_discount_service_idToservice       service?                          @relation("service_discount_service_idToservice", fields: [discount_service_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_discount_service_id")
  other_service_service_discount_service_idToservice service[]                         @relation("service_discount_service_idToservice")
  airport                                            airport?                          @relation(fields: [airport_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_service_airport1")
  car_seat                                           carSeat?                          @relation(fields: [car_seat_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_service_car_seat1")
  car_type                                           carType?                          @relation(fields: [car_type_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_service_car_type1")
  service_type                                       service_type                      @relation(fields: [service_type_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_service_service_type1")
  service_unit                                       service_unit?                     @relation(fields: [service_unit_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_service_service_unit1")
  visa_purpose                                       visa_purpose?                     @relation(fields: [visa_purpose_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_service_visa_purpose1")
  visa_type                                          visa_type?                        @relation(fields: [visa_type_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_service_visa_type1")
  website                                            website                           @relation(fields: [website_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_service_website1")
  service_service_upgrade_service_idToservice        service?                          @relation("service_upgrade_service_idToservice", fields: [upgrade_service_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_upgrade_service_id")
  other_service_service_upgrade_service_idToservice  service[]                         @relation("service_upgrade_service_idToservice")
  xero_account                                       xero_account?                     @relation(fields: [xero_account_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "service_ibfk_1")
  service_has_company_member_type                    service_has_company_member_type[] @ignore
  service_has_company_suffix                         service_has_company_suffix[]
  service_has_file_template                          service_has_file_template[]
  subscription                                       subscription[]

  @@index([discount_service_id], map: "fk_discount_service_id_idx")
  @@index([airport_id], map: "fk_service_airport1_idx")
  @@index([car_seat_id], map: "fk_service_car_seat1_idx")
  @@index([car_type_id], map: "fk_service_car_type1_idx")
  @@index([service_type_id], map: "fk_service_service_type1_idx")
  @@index([service_unit_id], map: "fk_service_service_unit1_idx")
  @@index([visa_purpose_id], map: "fk_service_visa_purpose1_idx")
  @@index([visa_type_id], map: "fk_service_visa_type1_idx")
  @@index([website_id], map: "fk_service_website1_idx")
  @@index([xero_account_id], map: "fk_service_xero_account")
  @@index([upgrade_service_id], map: "fk_upgrade_service_id_idx")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model service_change_officer {
  id                                       Int                                        @id @default(autoincrement())
  company_member_type_id                   Int?
  change_request_status_id                 Int?
  name                                     String                                     @db.Text
  description                              String?                                    @db.Text
  created_time                             DateTime?                                  @default(now()) @db.DateTime(0)
  updated_time                             DateTime?                                  @default(now()) @db.DateTime(0)
  is_deleted                               Int                                        @default(0) @db.TinyInt
  change_request_status                    changeRequestStatus?                       @relation(fields: [change_request_status_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_service_change_officer_change_request_status_id")
  company_member_type                      company_member_type?                       @relation(fields: [company_member_type_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_service_change_officer_company_member_type_id")
  service_change_officer_has_file_template service_change_officer_has_file_template[]

  @@index([change_request_status_id], map: "fk_service_change_officer_change_request_status_id_idx")
  @@index([company_member_type_id], map: "fk_service_change_officer_company_member_type_id_idx")
}

model service_change_officer_has_file_template {
  service_change_officer_id Int
  file_template_id          Int
  file_template             file_template          @relation(fields: [file_template_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_service_change_officer_file_template_id")
  service_change_officer    service_change_officer @relation(fields: [service_change_officer_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_service_change_officer_has_file_template_sco")

  @@id([service_change_officer_id, file_template_id])
  @@index([file_template_id], map: "fk_service_change_officer_file_template_id_idx")
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
model service_has_company_member_type {
  service_id             Int?
  company_member_type_id Int?
  company_member_type    company_member_type? @relation(fields: [company_member_type_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "FK_service_member_type_company_member_type_id")
  service                service?             @relation(fields: [service_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "FK_service_member_type_service_id")

  @@index([company_member_type_id], map: "FK_service_member_type_company_member_type_id")
  @@index([service_id], map: "FK_service_member_type_service_id")
  @@ignore
}

model service_has_company_suffix {
  company_suffix_id Int
  service_id        Int
  company_suffix    company_suffix @relation(fields: [company_suffix_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_service_has_company_suffix_company_suffix1")
  service           service        @relation(fields: [service_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_service_has_company_suffix_service")

  @@id([company_suffix_id, service_id])
  @@index([company_suffix_id], map: "fk_country_has_company_suffix_company_suffix1_idx")
  @@index([service_id], map: "fk_service_has_company_suffix_service_idx")
}

model service_has_file_template {
  service_id       Int
  file_template_id Int
  type_configs     String?       @db.Text
  file_template    file_template @relation(fields: [file_template_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_service_has_file_template_file_template_id")
  service          service       @relation(fields: [service_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_service_has_file_template_service_id")

  @@id([service_id, file_template_id])
  @@index([file_template_id], map: "fk_service_has_file_template_file_template_id_idx")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model service_type {
  id                          Int                           @id @default(autoincrement())
  name                        String?                       @db.VarChar(45)
  description                 String?                       @db.Text
  left                        Int?
  right                       Int?
  parent_id                   Int?
  website_id                  Int?
  is_active                   Boolean                       @default(true)
  process_step_types          Json?
  is_required                 Int?                          @default(0) @db.TinyInt
  is_only                     Int?                          @default(0) @db.TinyInt
  is_deleted                  Int                           @default(0) @db.TinyInt
  created_time                DateTime?                     @default(now()) @db.DateTime(0)
  updated_time                DateTime?                     @default(now()) @db.DateTime(0)
  order                       Int?
  action_process_step         actionProcessStep[]
  Renamedpackage              Renamedpackage[]
  service                     service[]
  website                     website?                      @relation(fields: [website_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_ser_website_id_web_id_41gc")
  service_type                service_type?                 @relation("service_typeToservice_type", fields: [parent_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_service_type_service_type1")
  other_service_type          service_type[]                @relation("service_typeToservice_type")
  service_type_has_department service_type_has_department[]

  @@index([website_id], map: "fk_ser_website_id_web_id_41gc")
  @@index([parent_id], map: "fk_service_type_service_type1_idx")
}

model service_type_has_department {
  service_type_id Int
  department_id   Int
  is_main         Boolean?     @default(false)
  department      department   @relation(fields: [department_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_department_id")
  service_type    service_type @relation(fields: [service_type_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_ser_service_type_id_ser_id_xtc")

  @@unique([service_type_id, department_id], map: "service_type_department_UNIQUE")
  @@index([department_id], map: "fk_ser_department_id_dep_id_7fhw")
}

model service_unit {
  id         Int       @id @default(autoincrement())
  name       String?   @db.VarChar(45)
  plural     String?   @db.VarChar(45)
  is_deleted Int       @default(0) @db.TinyInt
  service    service[]
}

model singapore_acra {
  id          Int     @id @default(autoincrement())
  entity_name String? @db.Text
}

model subscription {
  id                    Int                     @id @default(autoincrement())
  name                  String?                 @db.VarChar(45)
  description           String?                 @db.Text
  value                 String?                 @db.Text
  created_time          DateTime?               @default(now()) @db.DateTime(0)
  updated_time          DateTime?               @default(now()) @db.DateTime(0)
  is_deleted            Int?                    @default(0) @db.TinyInt
  service_id            Int?
  num_of_company        Int?
  notification_template notification_template[]
  service               service?                @relation(fields: [service_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "FK_service_sub")
  user                  user[]

  @@index([service_id], map: "FK_service_sub")
}

model support_case {
  id                       Int                      @id @default(autoincrement())
  subject                  String                   @db.VarChar(255)
  user_id                  Int?
  support_case_type_id     Int
  support_case_status_id   Int
  support_case_priority_id Int
  is_deleted               Boolean                  @default(false)
  created_time             DateTime                 @default(now()) @db.DateTime(0)
  point                    Int
  message                  message[]
  support_case_priority    support_case_priority    @relation(fields: [support_case_priority_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_sup_support_case_priority_id_sup_id_3hj0")
  support_case_status      support_case_status      @relation(fields: [support_case_status_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_sup_support_case_status_id_sup_id_fe69")
  support_case_type        support_case_type        @relation(fields: [support_case_type_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_sup_support_case_type_id_sup_id_3ntx")
  user                     user?                    @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_sup_user_id_use_id_ge4h")
  support_case_has_order   support_case_has_order[]

  @@index([support_case_priority_id], map: "fk_sup_support_case_priority_id_sup_id_3hj0")
  @@index([support_case_status_id], map: "fk_sup_support_case_status_id_sup_id_fe69")
  @@index([support_case_type_id], map: "fk_sup_support_case_type_id_sup_id_3ntx")
  @@index([user_id], map: "fk_sup_user_id_use_id_ge4h")
}

model support_case_has_order {
  support_case_id Int
  order_id        Int
  updated_time    DateTime?    @default(now()) @db.DateTime(0)
  support_case    support_case @relation(fields: [support_case_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_sup_support_case_id_sup_id_dm37")
  order           order        @relation(fields: [order_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_support_case_has_order_order_idx")

  @@id([support_case_id, order_id])
  @@index([order_id], map: "fk_support_case_has_order_order_idx")
  @@index([support_case_id], map: "fk_support_case_has_order_support_case_idx")
}

model support_case_priority {
  id           Int            @id @default(autoincrement())
  name         String?        @db.VarChar(100)
  description  String?        @db.VarChar(200)
  is_deleted   Int            @default(0) @db.TinyInt
  support_case support_case[]
}

model support_case_status {
  id           Int            @id @default(autoincrement())
  name         String?        @db.VarChar(100)
  description  String?        @db.VarChar(200)
  is_deleted   Int            @default(0) @db.TinyInt
  support_case support_case[]
}

model support_case_type {
  id           Int            @id @default(autoincrement())
  name         String?        @db.VarChar(100)
  description  String?        @db.VarChar(200)
  is_deleted   Int            @default(0) @db.TinyInt
  support_case support_case[]
}

model survey {
  id            Int             @id @default(autoincrement())
  name          String?         @db.Text
  is_deleted    Int?            @default(0) @db.TinyInt
  survey_choice survey_choice[]
}

model survey_choice {
  id                         Int                          @id @default(autoincrement())
  survey_id                  Int?
  name                       String?                      @db.Text
  is_content                 Int?
  is_deleted                 Int?                         @default(0) @db.TinyInt
  customer_has_survey_choice customer_has_survey_choice[]
  survey                     survey?                      @relation(fields: [survey_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_survey_choice_survey1")

  @@index([survey_id], map: "fk_survey_choice_survey_idx")
}

model syslog {
  id                   Int          @id @default(autoincrement())
  api_url              String?      @db.VarChar(255)
  user_id              Int?
  syslog_type_id       Int?
  username             String?      @db.VarChar(255)
  body_req             String?      @db.LongText
  api_method_id        Int?
  relevant_link        String?      @db.VarChar(255)
  ip_address           String?      @db.VarChar(255)
  country_id           Int?
  customer_id          Int?
  order_id             Int?
  task_id              Int?
  created_time         DateTime?    @default(now()) @db.DateTime(0)
  status               Int?
  host                 String?      @db.VarChar(255)
  referer              String?      @db.VarChar(255)
  user_agent           String?      @db.VarChar(255)
  method               String?      @db.VarChar(255)
  token_id             Int?
  is_error             Int?         @default(0) @db.TinyInt
  is_un_expected_error Int?         @default(0) @db.TinyInt
  err_message          String?      @db.Text
  err_stack_trace      String?      @db.Text
  api_method           apiMethod?   @relation(fields: [api_method_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_sys_api_method_id_api_id_8yj3")
  country              country?     @relation(fields: [country_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_sys_country_id_cou_id_17il")
  syslog_type          syslog_type? @relation(fields: [syslog_type_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_sys_syslog_type_id_sys_id_cbyy")
  user                 user?        @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_sys_user_id_use_id_iwew")

  @@index([api_method_id], map: "fk_sys_api_method_id_api_id_8yj3")
  @@index([country_id], map: "fk_sys_country_id_cou_id_17il")
  @@index([syslog_type_id], map: "fk_sys_syslog_type_id_sys_id_cbyy")
  @@index([user_id], map: "fk_sys_user_id_use_id_iwew")
}

model syslog_type {
  id         Int      @id @default(autoincrement())
  name       String?  @db.VarChar(200)
  is_deleted Boolean? @default(false)
  syslog     syslog[]
}

model target {
  id             Int       @id @default(autoincrement())
  country_id     String?   @db.VarChar(255)
  value          Int?
  target_type_id Int?
  date_of_target DateTime? @db.DateTime(0)
  is_deleted     Int?      @default(0)
  created_time   DateTime  @default(now()) @db.DateTime(0)
  updated_time   DateTime  @default(now()) @db.DateTime(0)
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model task {
  id                                                                          Int                   @id @default(autoincrement())
  customer_id                                                                 Int?
  company_id                                                                  Int?
  order_id                                                                    Int?
  upgrade_order_id                                                            Int?
  is_deleted                                                                  Boolean?              @default(false)
  created_time                                                                DateTime?             @default(now()) @db.DateTime(0)
  full_name                                                                   String?               @db.VarChar(255)
  phone                                                                       String?               @db.VarChar(255)
  email                                                                       String?               @db.VarChar(255)
  address                                                                     String?               @db.VarChar(255)
  entity_type_id                                                              Int?
  country_id                                                                  Int?
  incorporation_country_id                                                    Int?
  is_remind_client_contact                                                    Boolean?
  is_remind_agent_check_name                                                  Boolean?
  is_remind_client_sign_order                                                 Boolean?
  is_remind_agent_check_document                                              Boolean?
  is_remind_client_sign_document                                              Boolean?
  is_remind_agent_check_orign_document                                        Boolean?
  is_remind_client_check_name                                                 Boolean?
  is_remind_agent_review_business_plan_form                                   Boolean?
  is_remind_agent_review_application_set                                      Boolean?
  is_remind_client_review_application_set                                     Boolean?
  is_remind_client_deposit                                                    Boolean?
  is_remind_agent_review_application_form                                     Boolean?
  is_remind_client_review_application_form                                    Boolean?
  is_remind_agent_review_schedule_meeting                                     Boolean?
  is_remind_client_schedule_meeting                                           Boolean?
  phone_country_id                                                            Int?
  phone_number                                                                String?               @db.VarChar(255)
  state                                                                       String?               @db.VarChar(255)
  city                                                                        String?               @db.VarChar(255)
  postal_code                                                                 String?               @db.VarChar(255)
  appointed_shareholder_company_member_id                                     Int?
  appointed_director_company_member_id                                        Int?
  appointed_ubo_company_member_id                                             Int?
  appointed_president_company_member_id                                       Int?
  is_finished                                                                 Boolean?              @default(false)
  is_banking_finished                                                         Int?
  is_remind_agent_service_request_round_chop                                  Boolean?              @default(false)
  is_remind_agent_service_request_certification                               Boolean?              @default(false)
  is_remind_agent_service_request_courier                                     Boolean?              @default(false)
  updated_time                                                                DateTime?             @default(now()) @db.DateTime(0)
  reason_use_nominee_director                                                 String?               @db.VarChar(255)
  reason_use_nominee_shareholder                                              String?               @db.VarChar(255)
  is_note_compliance                                                          Boolean?
  cs_leader_id                                                                Int?
  cs_member_id                                                                Int?
  accountant_leader_id                                                        Int?
  accountant_member_id                                                        Int?
  legal_leader_id                                                             Int?
  legal_member_id                                                             Int?
  compliance_leader_id                                                        Int?
  compliance_member_id                                                        Int?
  internal_bookeeping_leader_id                                               Int?
  internal_bookeeping_member_id                                               Int?
  tester_leader_id                                                            Int?
  time_unassigned_tester                                                      BigInt?
  addition_process                                                            additionProcess[]
  answer                                                                      answer[]
  banking_process                                                             bankingProcess[]
  change_request                                                              changeRequest[]
  company_interest                                                            company_interest[]
  company_ownership                                                           company_ownership[]
  company_share                                                               company_share[]
  fatca                                                                       fatca[]
  file                                                                        file[]
  history_log_cdc                                                             history_log_cdc[]
  note                                                                        note[]
  payment_information                                                         payment_information[]
  process                                                                     process[]
  proposed_name                                                               proposed_name[]
  ranking_partner                                                             ranking_partner[]
  user_task_accountant_leader_idTouser                                        user?                 @relation("task_accountant_leader_idTouser", fields: [accountant_leader_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_tas_accountant_leader_id_use_id_jg1p")
  user_task_accountant_member_idTouser                                        user?                 @relation("task_accountant_member_idTouser", fields: [accountant_member_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_tas_accountant_member_id_use_id_d12h")
  company_member_task_appointed_director_company_member_idTocompany_member    company_member?       @relation("task_appointed_director_company_member_idTocompany_member", fields: [appointed_director_company_member_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_tas_appointed_director_company_member_id_com_id_ht5c")
  company_member_task_appointed_president_company_member_idTocompany_member   company_member?       @relation("task_appointed_president_company_member_idTocompany_member", fields: [appointed_president_company_member_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_tas_appointed_president_company_member_id_com_id_2ves")
  company_member_task_appointed_shareholder_company_member_idTocompany_member company_member?       @relation("task_appointed_shareholder_company_member_idTocompany_member", fields: [appointed_shareholder_company_member_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_tas_appointed_shareholder_company_member_id_com_id_3k03")
  company_member_task_appointed_ubo_company_member_idTocompany_member         company_member?       @relation("task_appointed_ubo_company_member_idTocompany_member", fields: [appointed_ubo_company_member_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_tas_appointed_ubo_company_member_id_com_id_ee2u")
  company                                                                     company?              @relation(fields: [company_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_tas_company_id_com_id_j3cp")
  user_task_compliance_leader_idTouser                                        user?                 @relation("task_compliance_leader_idTouser", fields: [compliance_leader_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_tas_compliance_leader_id_use_id_3dl1")
  user_task_compliance_member_idTouser                                        user?                 @relation("task_compliance_member_idTouser", fields: [compliance_member_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_tas_compliance_member_id_use_id_kqi2")
  country_task_country_idTocountry                                            country?              @relation("task_country_idTocountry", fields: [country_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_tas_country_id_cou_id_caag")
  user_task_cs_leader_idTouser                                                user?                 @relation("task_cs_leader_idTouser", fields: [cs_leader_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_tas_cs_leader_id_use_id_guom")
  user_task_cs_member_idTouser                                                user?                 @relation("task_cs_member_idTouser", fields: [cs_member_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_tas_cs_member_id_use_id_50y8")
  customer                                                                    customer?             @relation(fields: [customer_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_tas_customer_id_cus_id_5fep")
  entity_type                                                                 entity_type?          @relation(fields: [entity_type_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_tas_entity_type_id_ent_id_crjn")
  country_task_incorporation_country_idTocountry                              country?              @relation("task_incorporation_country_idTocountry", fields: [incorporation_country_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_tas_incorporation_country_id_cou_id_73ul")
  user_task_internal_bookeeping_leader_idTouser                               user?                 @relation("task_internal_bookeeping_leader_idTouser", fields: [internal_bookeeping_leader_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_tas_internal_bookeeping_leader_id_use_id_bx56")
  user_task_internal_bookeeping_member_idTouser                               user?                 @relation("task_internal_bookeeping_member_idTouser", fields: [internal_bookeeping_member_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_tas_internal_bookeeping_member_id_use_id_c7t9")
  user_task_legal_leader_idTouser                                             user?                 @relation("task_legal_leader_idTouser", fields: [legal_leader_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_tas_legal_leader_id_use_id_fnn2")
  user_task_legal_member_idTouser                                             user?                 @relation("task_legal_member_idTouser", fields: [legal_member_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_tas_legal_member_id_use_id_1sn7")
  order_task_order_idToorder                                                  order?                @relation("task_order_idToorder", fields: [order_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_tas_order_id_ord_id_ber2")
  country_task_phone_country_idTocountry                                      country?              @relation("task_phone_country_idTocountry", fields: [phone_country_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_tas_phone_country_id_cou_id_9z9u")
  order_task_upgrade_order_idToorder                                          order?                @relation("task_upgrade_order_idToorder", fields: [upgrade_order_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_tas_upgrade_order_id_ord_id_1gdh")
  user_task_tester_leader_idTouser                                            user?                 @relation("task_tester_leader_idTouser", fields: [tester_leader_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_task_tester_leader_id")
  task_has_agent                                                              task_has_agent[]
  token                                                                       token[]

  @@index([accountant_leader_id], map: "fk_tas_accountant_leader_id_use_id_jg1p")
  @@index([accountant_member_id], map: "fk_tas_accountant_member_id_use_id_d12h")
  @@index([appointed_director_company_member_id], map: "fk_tas_appointed_director_company_member_id_com_id_ht5c")
  @@index([appointed_president_company_member_id], map: "fk_tas_appointed_president_company_member_id_com_id_2ves")
  @@index([appointed_shareholder_company_member_id], map: "fk_tas_appointed_shareholder_company_member_id_com_id_3k03")
  @@index([appointed_ubo_company_member_id], map: "fk_tas_appointed_ubo_company_member_id_com_id_ee2u")
  @@index([company_id], map: "fk_tas_company_id_com_id_j3cp")
  @@index([compliance_leader_id], map: "fk_tas_compliance_leader_id_use_id_3dl1")
  @@index([compliance_member_id], map: "fk_tas_compliance_member_id_use_id_kqi2")
  @@index([country_id], map: "fk_tas_country_id_cou_id_caag")
  @@index([cs_leader_id], map: "fk_tas_cs_leader_id_use_id_guom")
  @@index([cs_member_id], map: "fk_tas_cs_member_id_use_id_50y8")
  @@index([customer_id], map: "fk_tas_customer_id_cus_id_5fep")
  @@index([entity_type_id], map: "fk_tas_entity_type_id_ent_id_crjn")
  @@index([incorporation_country_id], map: "fk_tas_incorporation_country_id_cou_id_73ul")
  @@index([internal_bookeeping_leader_id], map: "fk_tas_internal_bookeeping_leader_id_use_id_bx56")
  @@index([internal_bookeeping_member_id], map: "fk_tas_internal_bookeeping_member_id_use_id_c7t9")
  @@index([legal_leader_id], map: "fk_tas_legal_leader_id_use_id_fnn2")
  @@index([legal_member_id], map: "fk_tas_legal_member_id_use_id_1sn7")
  @@index([order_id], map: "fk_tas_order_id_ord_id_ber2")
  @@index([phone_country_id], map: "fk_tas_phone_country_id_cou_id_9z9u")
  @@index([upgrade_order_id], map: "fk_tas_upgrade_order_id_ord_id_1gdh")
  @@index([tester_leader_id], map: "fk_task_tester_leader_id_idx")
}

model task_has_agent {
  id                  Int              @unique(map: "id") @default(autoincrement())
  task_id             Int
  agent_id            Int
  addition_process_id Int?
  created_time        DateTime?        @default(now()) @db.DateTime(0)
  addition_process    additionProcess? @relation(fields: [addition_process_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_tas_addition_process_id_add_id_59ol")
  agent               agent            @relation(fields: [agent_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_tas_agent_id_age_id_3dc4")
  task                task             @relation(fields: [task_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_tas_task_id_tas_id_aia4")

  @@id([task_id, agent_id])
  @@index([addition_process_id], map: "fk_tas_addition_process_id_add_id_59ol")
  @@index([agent_id], map: "fk_tas_agent_id_age_id_3dc4")
}

model team_group {
  id                          Int                           @id @default(autoincrement())
  name                        String?                       @db.VarChar(100)
  leader_user_id              Int?
  is_deleted                  Boolean?                      @default(false)
  created_time                DateTime?                     @default(now()) @db.DateTime(0)
  updated_time                DateTime?                     @default(now()) @db.DateTime(0)
  email_template_has_receiver email_template_has_receiver[]
  group_has_user              group_has_user[]
  user                        user?                         @relation(fields: [leader_user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_leader_user_id")

  @@index([leader_user_id], map: "fk_leader_user_id_idx")
}

model title_name {
  id         Int        @id @default(autoincrement())
  name       String?    @db.Text
  is_deleted Int        @default(0) @db.TinyInt
  customer   customer[]
  person     person[]
}

model token {
  id                                                               Int             @id @default(autoincrement())
  user_id                                                          Int?
  access_token                                                     String          @db.Text
  access_token_exp                                                 Int
  access_token_iat                                                 Int?
  refresh_token                                                    String          @db.VarChar(255)
  refresh_token_exp                                                Int?
  refresh_token_iat                                                Int?
  scope                                                            String?         @db.VarChar(255)
  token_type                                                       Int?
  xero_token_type                                                  String?         @db.VarChar(255)
  xero_id_token                                                    String?         @db.VarChar(255)
  xero_session_state                                               String?         @db.VarChar(255)
  website_id                                                       Int?
  task_id                                                          Int?
  agent_id                                                         Int?
  company_member_id                                                Int?
  file_template_id                                                 Int?
  belong_to_company_member_id                                      Int?
  ip_address                                                       String?         @db.VarChar(255)
  count_request                                                    Int?
  created_time                                                     DateTime?       @default(now()) @db.DateTime(0)
  updated_time                                                     DateTime?       @default(now()) @db.DateTime(0)
  agent                                                            agent?          @relation(fields: [agent_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_tok_agent_id_age_id_2cha")
  company_member_token_belong_to_company_member_idTocompany_member company_member? @relation("token_belong_to_company_member_idTocompany_member", fields: [belong_to_company_member_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_tok_belong_to_company_member_id_com_id_9mf5")
  company_member_token_company_member_idTocompany_member           company_member? @relation("token_company_member_idTocompany_member", fields: [company_member_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_tok_company_member_id_com_id_lys")
  file_template                                                    file_template?  @relation(fields: [file_template_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_tok_file_template_id_fil_id_g0lx")
  task                                                             task?           @relation(fields: [task_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_tok_task_id_tas_id_g7px")
  user                                                             user?           @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_tok_user_id_use_id_bunm")
  website                                                          website?        @relation(fields: [website_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_tok_website_id_web_id_4k48")

  @@index([agent_id], map: "fk_tok_agent_id_age_id_2cha")
  @@index([belong_to_company_member_id], map: "fk_tok_belong_to_company_member_id_com_id_9mf5")
  @@index([company_member_id], map: "fk_tok_company_member_id_com_id_lys")
  @@index([file_template_id], map: "fk_tok_file_template_id_fil_id_g0lx")
  @@index([task_id], map: "fk_tok_task_id_tas_id_g7px")
  @@index([user_id], map: "fk_tok_user_id_use_id_bunm")
  @@index([website_id], map: "fk_tok_website_id_web_id_4k48")
}

model token_type {
  id         Int      @id @default(autoincrement())
  name       String?  @db.VarChar(100)
  is_deleted Boolean? @default(false)
}

model tool_business_entity {
  id             Int      @id @default(autoincrement())
  option_id      Int
  entity_type_id Int
  score          Int?
  is_reject      Int?
  is_reset       Int?
  is_deleted     Boolean? @default(false)
  updated_time   DateTime @default(now()) @db.DateTime(0)
  created_time   DateTime @default(now()) @db.DateTime(0)
  option         option   @relation(fields: [option_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_too_option_id_opt_id_9x22")

  @@index([option_id], map: "fk_too_option_id_opt_id_9x22")
}

model type_member {
  id                                    Int                                     @id @default(autoincrement())
  name                                  String?                                 @db.VarChar(100)
  is_deleted                            Int?                                    @default(0) @db.TinyInt
  company_member                        company_member[]
  file_template_has_company_member_type file_template_has_company_member_type[]
  history_company_member                history_company_member[]
}

model url_list {
  id               Int            @id @default(autoincrement())
  name             String?        @db.VarChar(200)
  value            String?        @db.Text
  url_list_type_id Int?
  is_url           Int?           @default(0) @db.TinyInt
  is_deleted       Int?           @default(0) @db.TinyInt
  created_time     DateTime?      @default(now()) @db.DateTime(0)
  updated_time     DateTime?      @default(now()) @db.DateTime(0)
  url_list_type    url_list_type? @relation(fields: [url_list_type_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "pk_url_list_type")

  @@index([url_list_type_id], map: "pk_url_list_type_idx")
}

model url_list_type {
  id         Int        @id @default(autoincrement())
  name       String?    @db.VarChar(45)
  is_deleted Int?
  url_list   url_list[]
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model user {
  id                                                    Int                           @id @default(autoincrement())
  username                                              String?                       @db.VarChar(320)
  password                                              String?                       @db.VarChar(100)
  password_salt                                         String?                       @db.VarChar(100)
  created_time                                          DateTime?                     @default(now()) @db.DateTime(0)
  status                                                Int?                          @default(0)
  reset_password_token                                  String?                       @db.Text
  reset_password_token_exp                              Int?
  two_factor_token                                      String?                       @db.Text
  two_factor_token_exp                                  Int?
  is_two_factor_authentication                          Int?                          @default(0) @db.TinyInt
  person_id                                             Int?
  customer_id                                           Int?
  subscription_id                                       Int?
  facebook_id                                           Int?
  is_deleted                                            Int?                          @default(0) @db.TinyInt
  action_log                                            actionLog[]
  billing                                               billing[]
  customer_customer_accountant_leader_idTouser          customer[]                    @relation("customer_accountant_leader_idTouser")
  customer_customer_accountant_member_idTouser          customer[]                    @relation("customer_accountant_member_idTouser")
  customer_customer_compliance_leader_idTouser          customer[]                    @relation("customer_compliance_leader_idTouser")
  customer_customer_compliance_member_idTouser          customer[]                    @relation("customer_compliance_member_idTouser")
  customer_customer_cs_leader_idTouser                  customer[]                    @relation("customer_cs_leader_idTouser")
  customer_customer_cs_member_idTouser                  customer[]                    @relation("customer_cs_member_idTouser")
  customer_customer_internal_bookeeping_leader_idTouser customer[]                    @relation("customer_internal_bookeeping_leader_idTouser")
  customer_customer_internal_bookeeping_member_idTouser customer[]                    @relation("customer_internal_bookeeping_member_idTouser")
  customer_customer_legal_leader_idTouser               customer[]                    @relation("customer_legal_leader_idTouser")
  customer_customer_legal_member_idTouser               customer[]                    @relation("customer_legal_member_idTouser")
  customer_customer_tester_leader_idTouser              customer[]                    @relation("customer_tester_leader_idTouser")
  email_template_has_receiver                           email_template_has_receiver[]
  file                                                  file[]
  group_has_user                                        group_has_user[]
  history_log_cdc                                       history_log_cdc[]
  message                                               message[]
  note                                                  note[]
  process                                               process[]
  support_case                                          support_case[]
  syslog                                                syslog[]
  task_task_accountant_leader_idTouser                  task[]                        @relation("task_accountant_leader_idTouser")
  task_task_accountant_member_idTouser                  task[]                        @relation("task_accountant_member_idTouser")
  task_task_compliance_leader_idTouser                  task[]                        @relation("task_compliance_leader_idTouser")
  task_task_compliance_member_idTouser                  task[]                        @relation("task_compliance_member_idTouser")
  task_task_cs_leader_idTouser                          task[]                        @relation("task_cs_leader_idTouser")
  task_task_cs_member_idTouser                          task[]                        @relation("task_cs_member_idTouser")
  task_task_internal_bookeeping_leader_idTouser         task[]                        @relation("task_internal_bookeeping_leader_idTouser")
  task_task_internal_bookeeping_member_idTouser         task[]                        @relation("task_internal_bookeeping_member_idTouser")
  task_task_legal_leader_idTouser                       task[]                        @relation("task_legal_leader_idTouser")
  task_task_legal_member_idTouser                       task[]                        @relation("task_legal_member_idTouser")
  task_task_tester_leader_idTouser                      task[]                        @relation("task_tester_leader_idTouser")
  team_group                                            team_group[]
  token                                                 token[]
  customer_user_customer_idTocustomer                   customer?                     @relation("user_customer_idTocustomer", fields: [customer_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_user_customer1")
  person                                                person?                       @relation(fields: [person_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_user_person1")
  subscription                                          subscription?                 @relation(fields: [subscription_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_user_subscription1")
  user_has_notification                                 user_has_notification[]
  user_has_role                                         user_has_role[]

  @@index([customer_id], map: "fk_user_customer1_idx")
  @@index([person_id], map: "fk_user_person1_idx")
  @@index([subscription_id], map: "fk_user_subscription1_idx")
}

model user_has_notification {
  user_id         Int
  notification_id Int
  is_read         Int?         @default(0) @db.TinyInt
  notification    notification @relation(fields: [notification_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_user_has_notification_notification_idx")
  user            user         @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_user_has_notification_user_idx")

  @@id([user_id, notification_id])
  @@index([notification_id], map: "fk_user_has_notification_notification_idx")
  @@index([user_id], map: "fk_user_has_notification_user_idx")
}

model user_has_role {
  user_id Int
  role_id Int
  role    role @relation(fields: [role_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_user_has_role_role1")
  user    user @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_user_has_role_user1")

  @@id([user_id, role_id])
  @@index([role_id], map: "fk_user_has_role_role1_idx")
  @@index([user_id], map: "fk_user_has_role_user1_idx")
}

model visaOrder {
  id              Int           @id @default(autoincrement())
  order_id        Int
  airport_id      Int?
  visa_purpose_id Int?
  visa_type_id    Int?
  flight_number   String?       @db.VarChar(255)
  arrival_time    DateTime      @db.DateTime(0)
  entry_time      DateTime      @db.DateTime(0)
  exit_time       DateTime      @db.DateTime(0)
  car_pickup_time DateTime      @db.DateTime(0)
  created_time    DateTime      @default(now()) @db.DateTime(0)
  updated_time    DateTime      @default(now()) @db.DateTime(0)
  is_deleted      Boolean?      @default(false)
  airport         airport?      @relation(fields: [airport_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_vis_airport_id_air_id_a20y")
  order           order         @relation(fields: [order_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_vis_order_id_ord_id_fwgt")
  visa_purpose    visa_purpose? @relation(fields: [visa_purpose_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_vis_visa_purpose_id_vis_id_9syb")
  visa_type       visa_type?    @relation(fields: [visa_type_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_vis_visa_type_id_vis_id_l2k0")

  @@index([airport_id], map: "fk_vis_airport_id_air_id_a20y")
  @@index([order_id], map: "fk_vis_order_id_ord_id_fwgt")
  @@index([visa_purpose_id], map: "fk_vis_visa_purpose_id_vis_id_9syb")
  @@index([visa_type_id], map: "fk_vis_visa_type_id_vis_id_l2k0")
}

model visa_purpose {
  id         Int         @id @default(autoincrement())
  name       String?     @db.Text
  is_deleted Int         @default(0) @db.TinyInt
  customer   customer[]
  service    service[]
  visaOrder  visaOrder[]
}

model visa_type {
  id         Int         @id @default(autoincrement())
  name       String?     @db.Text
  is_deleted Int         @default(0) @db.TinyInt
  customer   customer[]
  service    service[]
  visaOrder  visaOrder[]
}

model visa_vietnam_arrival {
  id         Int      @id @default(autoincrement())
  country_id Int?
  day_free   Int?
  is_deleted Int?     @default(0) @db.TinyInt
  country    country? @relation(fields: [country_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_visa_vietnam_arrival_country1")

  @@index([country_id], map: "fk_visa_vietnam_arrival_country1")
}

model voucher {
  id               Int           @id @default(autoincrement())
  name             String?       @db.VarChar(255)
  voucher_code     String        @db.VarChar(255)
  customer_id      Int?
  google_client_id Int?
  voucher_type_id  Int?
  order_id         Int?
  is_active        Boolean?
  is_used          Boolean?
  is_running       Int?          @default(0)
  is_deleted       Boolean?      @default(false)
  expired_time     DateTime?     @db.DateTime(0)
  active_date      DateTime?     @db.DateTime(0)
  used_date        DateTime?     @db.DateTime(0)
  open_date        DateTime?     @db.DateTime(0)
  created_time     DateTime      @default(now()) @db.DateTime(0)
  updated_time     DateTime      @default(now()) @db.DateTime(0)
  customer         customer?     @relation(fields: [customer_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_vou_customer_id_cus_id_7f7y")
  order            order?        @relation(fields: [order_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_vou_order_id_ord_id_8rjw")
  voucher_type     voucher_type? @relation(fields: [voucher_type_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_vou_voucher_type_id_vou_id_bgsy")

  @@index([customer_id], map: "fk_vou_customer_id_cus_id_7f7y")
  @@index([order_id], map: "fk_vou_order_id_ord_id_8rjw")
  @@index([voucher_type_id], map: "fk_vou_voucher_type_id_vou_id_bgsy")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model voucher_type {
  id                        Int                      @id @default(autoincrement())
  name                      String?                  @db.VarChar(225)
  config                    Json?
  percent                   Int?                     @default(0)
  uuid                      String                   @db.Char(36)
  is_deleted                Int?                     @default(0) @db.TinyInt
  created_time              DateTime?                @default(now()) @db.DateTime(0)
  updated_time              DateTime?                @default(now()) @db.DateTime(0)
  campaign_has_voucher_type campaignHasVoucherType[]
  click                     click[]
  voucher                   voucher[]
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model website {
  id                         Int              @id @default(autoincrement())
  currency_id                Int?             @default(1)
  name                       String?          @db.VarChar(100)
  domain                     String?          @db.VarChar(100)
  domain_dashboard           String?          @db.VarChar(100)
  stripe_key                 String?          @db.Text
  paypal_key                 String?          @db.Text
  mailchimp_key              String?          @db.Text
  min_amount                 Float?           @default(0) @db.Float
  min_unit                   Float?           @default(0) @db.Float
  email                      String?          @db.Text
  email_contact              String?          @db.VarChar(100)
  email_name                 String?          @db.Text
  email_code                 String?          @db.Text
  email_credential           String?          @db.Text
  companies_house_credential String?          @db.Text
  analytics_signature        String?          @db.VarChar(3072)
  view_id                    String?          @db.VarChar(32)
  email_token                String?          @db.Text
  tawk_to_webhook            String?          @db.VarChar(255)
  created_time               DateTime?        @default(now()) @db.DateTime(0)
  is_deleted                 Int              @default(0) @db.TinyInt
  aws_bucket_key             String?          @db.Text
  xero_tenant_name           String?          @db.VarChar(100)
  xero_tenant_id             String?          @db.VarChar(100)
  xero_client_id             String?          @db.VarChar(100)
  xero_client_secret         String?          @db.VarChar(100)
  xero_hook_key              String?          @db.VarChar(100)
  xero_redirect_url          String?          @db.VarChar(100)
  aws_bucket_log             String?          @db.Text
  google_ads_config          String?          @db.Text
  endpoint_secret_stripe     String?          @db.Text
  min_make_payment_amount    Float?           @default(0) @db.Float
  customer                   customer[]
  order                      order[]
  Renamedpackage             Renamedpackage[]
  portal_type                portal_type[]
  service                    service[]
  service_type               service_type[]
  token                      token[]
  currency                   currency?        @relation(fields: [currency_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_website_currency_1")

  @@index([currency_id], map: "fk_website_currency_1_idx")
}

model xero_account {
  id           Int       @id @default(autoincrement())
  name         String    @db.VarChar(50)
  description  String?   @db.VarChar(200)
  type         String    @default("SALE") @db.VarChar(50)
  code         String    @db.VarChar(50)
  is_deleted   Int       @default(0)
  updated_time DateTime? @default(now()) @db.DateTime(0)
  created_time DateTime? @default(now()) @db.DateTime(0)
  service      service[]
}

model xero_invoice_status {
  id          Int     @id @default(autoincrement())
  name        String? @db.VarChar(100)
  xero_code   String? @db.VarChar(100)
  description String? @db.VarChar(200)
  is_deleted  Int     @default(0) @db.TinyInt
  order       order[]
}
